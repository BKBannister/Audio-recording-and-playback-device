
EDsign314.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005850  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08005a14  08005a14  00015a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e04  08005e04  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e04  08005e04  00015e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e0c  08005e0c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e0c  08005e0c  00015e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e10  08005e10  00015e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001160  2000006c  08005e80  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011cc  08005e80  000211cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c76  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024a9  00000000  00000000  00030d12  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010b0  00000000  00000000  000331c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f88  00000000  00000000  00034270  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023668  00000000  00000000  000351f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cabd  00000000  00000000  00058860  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7cee  00000000  00000000  0006531d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013d00b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000480c  00000000  00000000  0013d088  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000006c 	.word	0x2000006c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080059fc 	.word	0x080059fc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000070 	.word	0x20000070
 8000200:	080059fc 	.word	0x080059fc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	80fb      	strh	r3, [r7, #6]
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  //if((debounce == 1)&&(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)||HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)||HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)||HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4))){
	  	  //Start reording audio 1
		  if((GPIO_Pin == GPIO_PIN_8)&&(start_recording == 1)){
 800050e:	88fb      	ldrh	r3, [r7, #6]
 8000510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000514:	d107      	bne.n	8000526 <HAL_GPIO_EXTI_Callback+0x22>
 8000516:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	b2db      	uxtb	r3, r3
 800051c:	2b01      	cmp	r3, #1
 800051e:	d102      	bne.n	8000526 <HAL_GPIO_EXTI_Callback+0x22>
			Record_1 = 1;
 8000520:	4b26      	ldr	r3, [pc, #152]	; (80005bc <HAL_GPIO_EXTI_Callback+0xb8>)
 8000522:	2201      	movs	r2, #1
 8000524:	701a      	strb	r2, [r3, #0]
		  }
		  //Start reording audio 2
		  if((GPIO_Pin == GPIO_PIN_9)&&(start_recording == 1)){
 8000526:	88fb      	ldrh	r3, [r7, #6]
 8000528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800052c:	d107      	bne.n	800053e <HAL_GPIO_EXTI_Callback+0x3a>
 800052e:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	b2db      	uxtb	r3, r3
 8000534:	2b01      	cmp	r3, #1
 8000536:	d102      	bne.n	800053e <HAL_GPIO_EXTI_Callback+0x3a>
			Record_2 = 1;
 8000538:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <HAL_GPIO_EXTI_Callback+0xbc>)
 800053a:	2201      	movs	r2, #1
 800053c:	701a      	strb	r2, [r3, #0]
		  }
		  //Start reording audio 3
		  if((GPIO_Pin == GPIO_PIN_7)&&(start_recording == 1)){
 800053e:	88fb      	ldrh	r3, [r7, #6]
 8000540:	2b80      	cmp	r3, #128	; 0x80
 8000542:	d107      	bne.n	8000554 <HAL_GPIO_EXTI_Callback+0x50>
 8000544:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	b2db      	uxtb	r3, r3
 800054a:	2b01      	cmp	r3, #1
 800054c:	d102      	bne.n	8000554 <HAL_GPIO_EXTI_Callback+0x50>
			Record_3 = 1;
 800054e:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000550:	2201      	movs	r2, #1
 8000552:	701a      	strb	r2, [r3, #0]
		  }
		  //Start playback of audio 1
		  if((GPIO_Pin == GPIO_PIN_8)&&(start_recording == 0)){
 8000554:	88fb      	ldrh	r3, [r7, #6]
 8000556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800055a:	d107      	bne.n	800056c <HAL_GPIO_EXTI_Callback+0x68>
 800055c:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <HAL_GPIO_EXTI_Callback+0xb4>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	b2db      	uxtb	r3, r3
 8000562:	2b00      	cmp	r3, #0
 8000564:	d102      	bne.n	800056c <HAL_GPIO_EXTI_Callback+0x68>
			Playback_1 = 1;
 8000566:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000568:	2201      	movs	r2, #1
 800056a:	701a      	strb	r2, [r3, #0]
		  }
		  //Start playback of audio 3
		  if((GPIO_Pin == GPIO_PIN_9)&&(start_recording == 0)){
 800056c:	88fb      	ldrh	r3, [r7, #6]
 800056e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000572:	d107      	bne.n	8000584 <HAL_GPIO_EXTI_Callback+0x80>
 8000574:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2b00      	cmp	r3, #0
 800057c:	d102      	bne.n	8000584 <HAL_GPIO_EXTI_Callback+0x80>
			Playback_2 = 1;
 800057e:	4b13      	ldr	r3, [pc, #76]	; (80005cc <HAL_GPIO_EXTI_Callback+0xc8>)
 8000580:	2201      	movs	r2, #1
 8000582:	701a      	strb	r2, [r3, #0]
		  }
		  //Start playback of audio 3
		  if((GPIO_Pin == GPIO_PIN_7)&&(start_recording == 0)){
 8000584:	88fb      	ldrh	r3, [r7, #6]
 8000586:	2b80      	cmp	r3, #128	; 0x80
 8000588:	d107      	bne.n	800059a <HAL_GPIO_EXTI_Callback+0x96>
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <HAL_GPIO_EXTI_Callback+0xb4>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	b2db      	uxtb	r3, r3
 8000590:	2b00      	cmp	r3, #0
 8000592:	d102      	bne.n	800059a <HAL_GPIO_EXTI_Callback+0x96>
			Playback_3 = 1;
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
		  }
		  //Stop all actions
		  if(GPIO_Pin == GPIO_PIN_4){
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	2b10      	cmp	r3, #16
 800059e:	d102      	bne.n	80005a6 <HAL_GPIO_EXTI_Callback+0xa2>
			Stop = 1;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <HAL_GPIO_EXTI_Callback+0xd0>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	701a      	strb	r2, [r3, #0]
		  }
		  debounce = 0;
 80005a6:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <HAL_GPIO_EXTI_Callback+0xd4>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]
  }
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	20000095 	.word	0x20000095
 80005bc:	2000008e 	.word	0x2000008e
 80005c0:	2000008f 	.word	0x2000008f
 80005c4:	20000090 	.word	0x20000090
 80005c8:	20000091 	.word	0x20000091
 80005cc:	20000092 	.word	0x20000092
 80005d0:	20000093 	.word	0x20000093
 80005d4:	20000094 	.word	0x20000094
 80005d8:	2000008a 	.word	0x2000008a

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	enum state machine = idle;
 80005e2:	2300      	movs	r3, #0
 80005e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f001 f923 	bl	8001830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 fa69 	bl	8000ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f000 fc89 	bl	8000f04 <MX_GPIO_Init>
  MX_DMA_Init();
 80005f2:	f000 fc49 	bl	8000e88 <MX_DMA_Init>
  MX_ADC2_Init();
 80005f6:	f000 facf 	bl	8000b98 <MX_ADC2_Init>
  MX_DAC_Init();
 80005fa:	f000 fb21 	bl	8000c40 <MX_DAC_Init>
  MX_SPI2_Init();
 80005fe:	f000 fb49 	bl	8000c94 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000602:	f000 fc17 	bl	8000e34 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000606:	f000 fb7b 	bl	8000d00 <MX_TIM2_Init>
  MX_TIM3_Init();
 800060a:	f000 fbc5 	bl	8000d98 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, startUp, 10, 10);
 800060e:	230a      	movs	r3, #10
 8000610:	220a      	movs	r2, #10
 8000612:	49c6      	ldr	r1, [pc, #792]	; (800092c <main+0x350>)
 8000614:	48c6      	ldr	r0, [pc, #792]	; (8000930 <main+0x354>)
 8000616:	f004 f81a 	bl	800464e <HAL_UART_Transmit>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adcbuffer, 1024);
 800061a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800061e:	49c5      	ldr	r1, [pc, #788]	; (8000934 <main+0x358>)
 8000620:	48c5      	ldr	r0, [pc, #788]	; (8000938 <main+0x35c>)
 8000622:	f001 f9bb 	bl	800199c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8000626:	48c5      	ldr	r0, [pc, #788]	; (800093c <main+0x360>)
 8000628:	f003 fbb9 	bl	8003d9e <HAL_TIM_Base_Start_IT>
  wave_init();
 800062c:	f000 fd20 	bl	8001070 <wave_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

			  if((Playback_3 == 1)&&(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))){
 8000630:	4bc3      	ldr	r3, [pc, #780]	; (8000940 <main+0x364>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b01      	cmp	r3, #1
 8000638:	d138      	bne.n	80006ac <main+0xd0>
 800063a:	2180      	movs	r1, #128	; 0x80
 800063c:	48c1      	ldr	r0, [pc, #772]	; (8000944 <main+0x368>)
 800063e:	f002 fdf5 	bl	800322c <HAL_GPIO_ReadPin>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d131      	bne.n	80006ac <main+0xd0>
					machine = track_3;
 8000648:	2303      	movs	r3, #3
 800064a:	71fb      	strb	r3, [r7, #7]
					Playback_3 = 0;
 800064c:	4bbc      	ldr	r3, [pc, #752]	; (8000940 <main+0x364>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, playBack_3, 10, 10);
 8000652:	230a      	movs	r3, #10
 8000654:	220a      	movs	r2, #10
 8000656:	49bc      	ldr	r1, [pc, #752]	; (8000948 <main+0x36c>)
 8000658:	48b5      	ldr	r0, [pc, #724]	; (8000930 <main+0x354>)
 800065a:	f003 fff8 	bl	800464e <HAL_UART_Transmit>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000664:	48b7      	ldr	r0, [pc, #732]	; (8000944 <main+0x368>)
 8000666:	f002 fdf9 	bl	800325c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000670:	48b4      	ldr	r0, [pc, #720]	; (8000944 <main+0x368>)
 8000672:	f002 fdf3 	bl	800325c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2120      	movs	r1, #32
 800067a:	48b4      	ldr	r0, [pc, #720]	; (800094c <main+0x370>)
 800067c:	f002 fdee 	bl	800325c <HAL_GPIO_WritePin>
					led_flash_3 = true;
 8000680:	4bb3      	ldr	r3, [pc, #716]	; (8000950 <main+0x374>)
 8000682:	2201      	movs	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]
					led_flash_2 = false;
 8000686:	4bb3      	ldr	r3, [pc, #716]	; (8000954 <main+0x378>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
					led_flash_1 = false;
 800068c:	4bb2      	ldr	r3, [pc, #712]	; (8000958 <main+0x37c>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim3);
 8000692:	48b2      	ldr	r0, [pc, #712]	; (800095c <main+0x380>)
 8000694:	f003 fba7 	bl	8003de6 <HAL_TIM_Base_Stop_IT>
					HAL_DAC_Stop_DMA (&hdac, DAC_CHANNEL_1);
 8000698:	2100      	movs	r1, #0
 800069a:	48b1      	ldr	r0, [pc, #708]	; (8000960 <main+0x384>)
 800069c:	f001 ff20 	bl	80024e0 <HAL_DAC_Stop_DMA>
					wave_fillbuffer(dacbuffer, 3, 1098);
 80006a0:	f240 424a 	movw	r2, #1098	; 0x44a
 80006a4:	2103      	movs	r1, #3
 80006a6:	48af      	ldr	r0, [pc, #700]	; (8000964 <main+0x388>)
 80006a8:	f000 fd1e 	bl	80010e8 <wave_fillbuffer>
			  }
			  if((Playback_2 == 1)&&(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9))){
 80006ac:	4bae      	ldr	r3, [pc, #696]	; (8000968 <main+0x38c>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d139      	bne.n	800072a <main+0x14e>
 80006b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ba:	48a2      	ldr	r0, [pc, #648]	; (8000944 <main+0x368>)
 80006bc:	f002 fdb6 	bl	800322c <HAL_GPIO_ReadPin>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d131      	bne.n	800072a <main+0x14e>
					machine = track_2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	71fb      	strb	r3, [r7, #7]
					Playback_2 = 0;
 80006ca:	4ba7      	ldr	r3, [pc, #668]	; (8000968 <main+0x38c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, playBack_2, 10, 10);
 80006d0:	230a      	movs	r3, #10
 80006d2:	220a      	movs	r2, #10
 80006d4:	49a5      	ldr	r1, [pc, #660]	; (800096c <main+0x390>)
 80006d6:	4896      	ldr	r0, [pc, #600]	; (8000930 <main+0x354>)
 80006d8:	f003 ffb9 	bl	800464e <HAL_UART_Transmit>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e2:	4898      	ldr	r0, [pc, #608]	; (8000944 <main+0x368>)
 80006e4:	f002 fdba 	bl	800325c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ee:	4895      	ldr	r0, [pc, #596]	; (8000944 <main+0x368>)
 80006f0:	f002 fdb4 	bl	800325c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2110      	movs	r1, #16
 80006f8:	4894      	ldr	r0, [pc, #592]	; (800094c <main+0x370>)
 80006fa:	f002 fdaf 	bl	800325c <HAL_GPIO_WritePin>
					led_flash_2 = true;
 80006fe:	4b95      	ldr	r3, [pc, #596]	; (8000954 <main+0x378>)
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
					led_flash_3 = false;
 8000704:	4b92      	ldr	r3, [pc, #584]	; (8000950 <main+0x374>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
					led_flash_1 = false;
 800070a:	4b93      	ldr	r3, [pc, #588]	; (8000958 <main+0x37c>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim3);
 8000710:	4892      	ldr	r0, [pc, #584]	; (800095c <main+0x380>)
 8000712:	f003 fb68 	bl	8003de6 <HAL_TIM_Base_Stop_IT>
					HAL_DAC_Stop_DMA (&hdac, DAC_CHANNEL_1);
 8000716:	2100      	movs	r1, #0
 8000718:	4891      	ldr	r0, [pc, #580]	; (8000960 <main+0x384>)
 800071a:	f001 fee1 	bl	80024e0 <HAL_DAC_Stop_DMA>
					wave_fillbuffer(dacbuffer, 2, 1098);
 800071e:	f240 424a 	movw	r2, #1098	; 0x44a
 8000722:	2102      	movs	r1, #2
 8000724:	488f      	ldr	r0, [pc, #572]	; (8000964 <main+0x388>)
 8000726:	f000 fcdf 	bl	80010e8 <wave_fillbuffer>
			  }
			  if((Playback_1 == 1)&&(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))){
 800072a:	4b91      	ldr	r3, [pc, #580]	; (8000970 <main+0x394>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2b01      	cmp	r3, #1
 8000732:	d138      	bne.n	80007a6 <main+0x1ca>
 8000734:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000738:	4884      	ldr	r0, [pc, #528]	; (800094c <main+0x370>)
 800073a:	f002 fd77 	bl	800322c <HAL_GPIO_ReadPin>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d130      	bne.n	80007a6 <main+0x1ca>
					machine = track_1;
 8000744:	2301      	movs	r3, #1
 8000746:	71fb      	strb	r3, [r7, #7]
					Playback_1 = 0;
 8000748:	4b89      	ldr	r3, [pc, #548]	; (8000970 <main+0x394>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, playBack_1, 10, 10);
 800074e:	230a      	movs	r3, #10
 8000750:	220a      	movs	r2, #10
 8000752:	4988      	ldr	r1, [pc, #544]	; (8000974 <main+0x398>)
 8000754:	4876      	ldr	r0, [pc, #472]	; (8000930 <main+0x354>)
 8000756:	f003 ff7a 	bl	800464e <HAL_UART_Transmit>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2110      	movs	r1, #16
 800075e:	487b      	ldr	r0, [pc, #492]	; (800094c <main+0x370>)
 8000760:	f002 fd7c 	bl	800325c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000764:	2200      	movs	r2, #0
 8000766:	2120      	movs	r1, #32
 8000768:	4878      	ldr	r0, [pc, #480]	; (800094c <main+0x370>)
 800076a:	f002 fd77 	bl	800325c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000774:	4873      	ldr	r0, [pc, #460]	; (8000944 <main+0x368>)
 8000776:	f002 fd71 	bl	800325c <HAL_GPIO_WritePin>
					led_flash_1 = true;
 800077a:	4b77      	ldr	r3, [pc, #476]	; (8000958 <main+0x37c>)
 800077c:	2201      	movs	r2, #1
 800077e:	701a      	strb	r2, [r3, #0]
					led_flash_2 = false;
 8000780:	4b74      	ldr	r3, [pc, #464]	; (8000954 <main+0x378>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
					led_flash_3 = false;
 8000786:	4b72      	ldr	r3, [pc, #456]	; (8000950 <main+0x374>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim3);
 800078c:	4873      	ldr	r0, [pc, #460]	; (800095c <main+0x380>)
 800078e:	f003 fb2a 	bl	8003de6 <HAL_TIM_Base_Stop_IT>
					HAL_DAC_Stop_DMA (&hdac, DAC_CHANNEL_1);
 8000792:	2100      	movs	r1, #0
 8000794:	4872      	ldr	r0, [pc, #456]	; (8000960 <main+0x384>)
 8000796:	f001 fea3 	bl	80024e0 <HAL_DAC_Stop_DMA>
					wave_fillbuffer(dacbuffer, 1, 1098);
 800079a:	f240 424a 	movw	r2, #1098	; 0x44a
 800079e:	2101      	movs	r1, #1
 80007a0:	4870      	ldr	r0, [pc, #448]	; (8000964 <main+0x388>)
 80007a2:	f000 fca1 	bl	80010e8 <wave_fillbuffer>
			  }
			  if((Record_3 == 1)&&(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))){
 80007a6:	4b74      	ldr	r3, [pc, #464]	; (8000978 <main+0x39c>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d132      	bne.n	8000816 <main+0x23a>
 80007b0:	2180      	movs	r1, #128	; 0x80
 80007b2:	4864      	ldr	r0, [pc, #400]	; (8000944 <main+0x368>)
 80007b4:	f002 fd3a 	bl	800322c <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d12b      	bne.n	8000816 <main+0x23a>
					machine = recording_3;
 80007be:	2306      	movs	r3, #6
 80007c0:	71fb      	strb	r3, [r7, #7]
					Record_3 = 0;
 80007c2:	4b6d      	ldr	r3, [pc, #436]	; (8000978 <main+0x39c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, record_3, 10, 10);
 80007c8:	230a      	movs	r3, #10
 80007ca:	220a      	movs	r2, #10
 80007cc:	496b      	ldr	r1, [pc, #428]	; (800097c <main+0x3a0>)
 80007ce:	4858      	ldr	r0, [pc, #352]	; (8000930 <main+0x354>)
 80007d0:	f003 ff3d 	bl	800464e <HAL_UART_Transmit>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80007d4:	2201      	movs	r2, #1
 80007d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007da:	485a      	ldr	r0, [pc, #360]	; (8000944 <main+0x368>)
 80007dc:	f002 fd3e 	bl	800325c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007e6:	4857      	ldr	r0, [pc, #348]	; (8000944 <main+0x368>)
 80007e8:	f002 fd38 	bl	800325c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2120      	movs	r1, #32
 80007f0:	4856      	ldr	r0, [pc, #344]	; (800094c <main+0x370>)
 80007f2:	f002 fd33 	bl	800325c <HAL_GPIO_WritePin>
					led_flash_3 = true;
 80007f6:	4b56      	ldr	r3, [pc, #344]	; (8000950 <main+0x374>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	701a      	strb	r2, [r3, #0]
					led_flash_2 = false;
 80007fc:	4b55      	ldr	r3, [pc, #340]	; (8000954 <main+0x378>)
 80007fe:	2200      	movs	r2, #0
 8000800:	701a      	strb	r2, [r3, #0]
					led_flash_1 = false;
 8000802:	4b55      	ldr	r3, [pc, #340]	; (8000958 <main+0x37c>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim3);
 8000808:	4854      	ldr	r0, [pc, #336]	; (800095c <main+0x380>)
 800080a:	f003 faec 	bl	8003de6 <HAL_TIM_Base_Stop_IT>
					HAL_DAC_Stop_DMA (&hdac, DAC_CHANNEL_1);
 800080e:	2100      	movs	r1, #0
 8000810:	4853      	ldr	r0, [pc, #332]	; (8000960 <main+0x384>)
 8000812:	f001 fe65 	bl	80024e0 <HAL_DAC_Stop_DMA>
			  }
			  if((Record_2 == 1)&&(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9))){
 8000816:	4b5a      	ldr	r3, [pc, #360]	; (8000980 <main+0x3a4>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	2b01      	cmp	r3, #1
 800081e:	d133      	bne.n	8000888 <main+0x2ac>
 8000820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000824:	4847      	ldr	r0, [pc, #284]	; (8000944 <main+0x368>)
 8000826:	f002 fd01 	bl	800322c <HAL_GPIO_ReadPin>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d12b      	bne.n	8000888 <main+0x2ac>
					machine = recording_2;
 8000830:	2305      	movs	r3, #5
 8000832:	71fb      	strb	r3, [r7, #7]
					Record_2 = 0;
 8000834:	4b52      	ldr	r3, [pc, #328]	; (8000980 <main+0x3a4>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, record_2, 10, 10);
 800083a:	230a      	movs	r3, #10
 800083c:	220a      	movs	r2, #10
 800083e:	4951      	ldr	r1, [pc, #324]	; (8000984 <main+0x3a8>)
 8000840:	483b      	ldr	r0, [pc, #236]	; (8000930 <main+0x354>)
 8000842:	f003 ff04 	bl	800464e <HAL_UART_Transmit>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000846:	2201      	movs	r2, #1
 8000848:	f44f 7180 	mov.w	r1, #256	; 0x100
 800084c:	483d      	ldr	r0, [pc, #244]	; (8000944 <main+0x368>)
 800084e:	f002 fd05 	bl	800325c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000858:	483a      	ldr	r0, [pc, #232]	; (8000944 <main+0x368>)
 800085a:	f002 fcff 	bl	800325c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2110      	movs	r1, #16
 8000862:	483a      	ldr	r0, [pc, #232]	; (800094c <main+0x370>)
 8000864:	f002 fcfa 	bl	800325c <HAL_GPIO_WritePin>
					led_flash_2 = true;
 8000868:	4b3a      	ldr	r3, [pc, #232]	; (8000954 <main+0x378>)
 800086a:	2201      	movs	r2, #1
 800086c:	701a      	strb	r2, [r3, #0]
					led_flash_3 = false;
 800086e:	4b38      	ldr	r3, [pc, #224]	; (8000950 <main+0x374>)
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
					led_flash_1 = false;
 8000874:	4b38      	ldr	r3, [pc, #224]	; (8000958 <main+0x37c>)
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim3);
 800087a:	4838      	ldr	r0, [pc, #224]	; (800095c <main+0x380>)
 800087c:	f003 fab3 	bl	8003de6 <HAL_TIM_Base_Stop_IT>
					HAL_DAC_Stop_DMA (&hdac, DAC_CHANNEL_1);
 8000880:	2100      	movs	r1, #0
 8000882:	4837      	ldr	r0, [pc, #220]	; (8000960 <main+0x384>)
 8000884:	f001 fe2c 	bl	80024e0 <HAL_DAC_Stop_DMA>
			  }
			  if((Record_1 == 1)&&(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))){
 8000888:	4b3f      	ldr	r3, [pc, #252]	; (8000988 <main+0x3ac>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b01      	cmp	r3, #1
 8000890:	d132      	bne.n	80008f8 <main+0x31c>
 8000892:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000896:	482d      	ldr	r0, [pc, #180]	; (800094c <main+0x370>)
 8000898:	f002 fcc8 	bl	800322c <HAL_GPIO_ReadPin>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d12a      	bne.n	80008f8 <main+0x31c>
					machine = recording_1;
 80008a2:	2304      	movs	r3, #4
 80008a4:	71fb      	strb	r3, [r7, #7]
					Record_1 = 0;
 80008a6:	4b38      	ldr	r3, [pc, #224]	; (8000988 <main+0x3ac>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, record_1, 10, 10);
 80008ac:	230a      	movs	r3, #10
 80008ae:	220a      	movs	r2, #10
 80008b0:	4936      	ldr	r1, [pc, #216]	; (800098c <main+0x3b0>)
 80008b2:	481f      	ldr	r0, [pc, #124]	; (8000930 <main+0x354>)
 80008b4:	f003 fecb 	bl	800464e <HAL_UART_Transmit>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2110      	movs	r1, #16
 80008bc:	4823      	ldr	r0, [pc, #140]	; (800094c <main+0x370>)
 80008be:	f002 fccd 	bl	800325c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2120      	movs	r1, #32
 80008c6:	4821      	ldr	r0, [pc, #132]	; (800094c <main+0x370>)
 80008c8:	f002 fcc8 	bl	800325c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80008cc:	2201      	movs	r2, #1
 80008ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d2:	481c      	ldr	r0, [pc, #112]	; (8000944 <main+0x368>)
 80008d4:	f002 fcc2 	bl	800325c <HAL_GPIO_WritePin>
					led_flash_1 = true;
 80008d8:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <main+0x37c>)
 80008da:	2201      	movs	r2, #1
 80008dc:	701a      	strb	r2, [r3, #0]
					led_flash_2 = false;
 80008de:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <main+0x378>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
					led_flash_3 = false;
 80008e4:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <main+0x374>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim3);
 80008ea:	481c      	ldr	r0, [pc, #112]	; (800095c <main+0x380>)
 80008ec:	f003 fa7b 	bl	8003de6 <HAL_TIM_Base_Stop_IT>
					HAL_DAC_Stop_DMA (&hdac, DAC_CHANNEL_1);
 80008f0:	2100      	movs	r1, #0
 80008f2:	481b      	ldr	r0, [pc, #108]	; (8000960 <main+0x384>)
 80008f4:	f001 fdf4 	bl	80024e0 <HAL_DAC_Stop_DMA>
			  }
			  if((Stop == 1)&&(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4))){
 80008f8:	4b25      	ldr	r3, [pc, #148]	; (8000990 <main+0x3b4>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d171      	bne.n	80009e6 <main+0x40a>
 8000902:	2110      	movs	r1, #16
 8000904:	4823      	ldr	r0, [pc, #140]	; (8000994 <main+0x3b8>)
 8000906:	f002 fc91 	bl	800322c <HAL_GPIO_ReadPin>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d16a      	bne.n	80009e6 <main+0x40a>
					machine = stoped;
 8000910:	2307      	movs	r3, #7
 8000912:	71fb      	strb	r3, [r7, #7]
					Stop = 0;
 8000914:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <main+0x3b4>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, stop, 10, 10);
 800091a:	230a      	movs	r3, #10
 800091c:	220a      	movs	r2, #10
 800091e:	491e      	ldr	r1, [pc, #120]	; (8000998 <main+0x3bc>)
 8000920:	4803      	ldr	r0, [pc, #12]	; (8000930 <main+0x354>)
 8000922:	f003 fe94 	bl	800464e <HAL_UART_Transmit>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	e038      	b.n	800099c <main+0x3c0>
 800092a:	bf00      	nop
 800092c:	20000000 	.word	0x20000000
 8000930:	20000f20 	.word	0x20000f20
 8000934:	20000ae0 	.word	0x20000ae0
 8000938:	200000f0 	.word	0x200000f0
 800093c:	20000ee0 	.word	0x20000ee0
 8000940:	20000093 	.word	0x20000093
 8000944:	40020000 	.word	0x40020000
 8000948:	2000003c 	.word	0x2000003c
 800094c:	40020400 	.word	0x40020400
 8000950:	2000008d 	.word	0x2000008d
 8000954:	2000008c 	.word	0x2000008c
 8000958:	2000008b 	.word	0x2000008b
 800095c:	20000138 	.word	0x20000138
 8000960:	20000238 	.word	0x20000238
 8000964:	2000024c 	.word	0x2000024c
 8000968:	20000092 	.word	0x20000092
 800096c:	20000048 	.word	0x20000048
 8000970:	20000091 	.word	0x20000091
 8000974:	20000054 	.word	0x20000054
 8000978:	20000090 	.word	0x20000090
 800097c:	20000030 	.word	0x20000030
 8000980:	2000008f 	.word	0x2000008f
 8000984:	20000024 	.word	0x20000024
 8000988:	2000008e 	.word	0x2000008e
 800098c:	20000018 	.word	0x20000018
 8000990:	20000094 	.word	0x20000094
 8000994:	40020800 	.word	0x40020800
 8000998:	2000000c 	.word	0x2000000c
 800099c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a0:	483d      	ldr	r0, [pc, #244]	; (8000a98 <main+0x4bc>)
 80009a2:	f002 fc5b 	bl	800325c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ac:	483a      	ldr	r0, [pc, #232]	; (8000a98 <main+0x4bc>)
 80009ae:	f002 fc55 	bl	800325c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2110      	movs	r1, #16
 80009b6:	4839      	ldr	r0, [pc, #228]	; (8000a9c <main+0x4c0>)
 80009b8:	f002 fc50 	bl	800325c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80009bc:	2200      	movs	r2, #0
 80009be:	2120      	movs	r1, #32
 80009c0:	4836      	ldr	r0, [pc, #216]	; (8000a9c <main+0x4c0>)
 80009c2:	f002 fc4b 	bl	800325c <HAL_GPIO_WritePin>
					led_flash_1 = false;
 80009c6:	4b36      	ldr	r3, [pc, #216]	; (8000aa0 <main+0x4c4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
					led_flash_2 = false;
 80009cc:	4b35      	ldr	r3, [pc, #212]	; (8000aa4 <main+0x4c8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
					led_flash_3 = false;
 80009d2:	4b35      	ldr	r3, [pc, #212]	; (8000aa8 <main+0x4cc>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim3);
 80009d8:	4834      	ldr	r0, [pc, #208]	; (8000aac <main+0x4d0>)
 80009da:	f003 fa04 	bl	8003de6 <HAL_TIM_Base_Stop_IT>
					HAL_DAC_Stop_DMA (&hdac, DAC_CHANNEL_1);
 80009de:	2100      	movs	r1, #0
 80009e0:	4833      	ldr	r0, [pc, #204]	; (8000ab0 <main+0x4d4>)
 80009e2:	f001 fd7d 	bl	80024e0 <HAL_DAC_Stop_DMA>
			  }
		interrupt_time = HAL_GetTick();
 80009e6:	f000 ff89 	bl	80018fc <HAL_GetTick>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4b31      	ldr	r3, [pc, #196]	; (8000ab4 <main+0x4d8>)
 80009f0:	701a      	strb	r2, [r3, #0]
		if((interrupt_time-last_interrupt_time) > 10){
 80009f2:	4b30      	ldr	r3, [pc, #192]	; (8000ab4 <main+0x4d8>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	461a      	mov	r2, r3
 80009f8:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <main+0x4dc>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	2b0a      	cmp	r3, #10
 8000a00:	dd03      	ble.n	8000a0a <main+0x42e>
			last_interrupt_time = interrupt_time;
 8000a02:	4b2c      	ldr	r3, [pc, #176]	; (8000ab4 <main+0x4d8>)
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	4b2c      	ldr	r3, [pc, #176]	; (8000ab8 <main+0x4dc>)
 8000a08:	701a      	strb	r2, [r3, #0]
		}

	  if(machine == idle){
		  //do nothing
	  }
	  if((machine == track_3)){
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	2b03      	cmp	r3, #3
 8000a0e:	d10b      	bne.n	8000a28 <main+0x44c>
		  HAL_TIM_Base_Start_IT(&htim3);
 8000a10:	4826      	ldr	r0, [pc, #152]	; (8000aac <main+0x4d0>)
 8000a12:	f003 f9c4 	bl	8003d9e <HAL_TIM_Base_Start_IT>
		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)dacbuffer, 1098, DAC_ALIGN_12B_R);
 8000a16:	2300      	movs	r3, #0
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	f240 434a 	movw	r3, #1098	; 0x44a
 8000a1e:	4a27      	ldr	r2, [pc, #156]	; (8000abc <main+0x4e0>)
 8000a20:	2100      	movs	r1, #0
 8000a22:	4823      	ldr	r0, [pc, #140]	; (8000ab0 <main+0x4d4>)
 8000a24:	f001 fcae 	bl	8002384 <HAL_DAC_Start_DMA>
	  }
	  if((machine == track_2)){
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d10b      	bne.n	8000a46 <main+0x46a>
		  HAL_TIM_Base_Start_IT(&htim3);
 8000a2e:	481f      	ldr	r0, [pc, #124]	; (8000aac <main+0x4d0>)
 8000a30:	f003 f9b5 	bl	8003d9e <HAL_TIM_Base_Start_IT>
		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)dacbuffer, 1098, DAC_ALIGN_12B_R);
 8000a34:	2300      	movs	r3, #0
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	f240 434a 	movw	r3, #1098	; 0x44a
 8000a3c:	4a1f      	ldr	r2, [pc, #124]	; (8000abc <main+0x4e0>)
 8000a3e:	2100      	movs	r1, #0
 8000a40:	481b      	ldr	r0, [pc, #108]	; (8000ab0 <main+0x4d4>)
 8000a42:	f001 fc9f 	bl	8002384 <HAL_DAC_Start_DMA>
	  }
	  if((machine == track_1)){
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d10b      	bne.n	8000a64 <main+0x488>
		  HAL_TIM_Base_Start_IT(&htim3);
 8000a4c:	4817      	ldr	r0, [pc, #92]	; (8000aac <main+0x4d0>)
 8000a4e:	f003 f9a6 	bl	8003d9e <HAL_TIM_Base_Start_IT>
		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)dacbuffer, 1098, DAC_ALIGN_12B_R);
 8000a52:	2300      	movs	r3, #0
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	f240 434a 	movw	r3, #1098	; 0x44a
 8000a5a:	4a18      	ldr	r2, [pc, #96]	; (8000abc <main+0x4e0>)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4814      	ldr	r0, [pc, #80]	; (8000ab0 <main+0x4d4>)
 8000a60:	f001 fc90 	bl	8002384 <HAL_DAC_Start_DMA>
	  }
	  if((machine == recording_3)){
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	2b06      	cmp	r3, #6
 8000a68:	d102      	bne.n	8000a70 <main+0x494>
		  HAL_TIM_Base_Start_IT(&htim3);
 8000a6a:	4810      	ldr	r0, [pc, #64]	; (8000aac <main+0x4d0>)
 8000a6c:	f003 f997 	bl	8003d9e <HAL_TIM_Base_Start_IT>
	  }
	  if((machine == recording_2)){
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	2b05      	cmp	r3, #5
 8000a74:	d102      	bne.n	8000a7c <main+0x4a0>
		  HAL_TIM_Base_Start_IT(&htim3);
 8000a76:	480d      	ldr	r0, [pc, #52]	; (8000aac <main+0x4d0>)
 8000a78:	f003 f991 	bl	8003d9e <HAL_TIM_Base_Start_IT>
	  }
	  if((machine == recording_1)){
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	d102      	bne.n	8000a88 <main+0x4ac>
		  HAL_TIM_Base_Start_IT(&htim3);
 8000a82:	480a      	ldr	r0, [pc, #40]	; (8000aac <main+0x4d0>)
 8000a84:	f003 f98b 	bl	8003d9e <HAL_TIM_Base_Start_IT>
	  }
	  if((machine == stoped)){
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	2b07      	cmp	r3, #7
 8000a8c:	f47f add0 	bne.w	8000630 <main+0x54>
	  	  machine = idle;
 8000a90:	2300      	movs	r3, #0
 8000a92:	71fb      	strb	r3, [r7, #7]
			  if((Playback_3 == 1)&&(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))){
 8000a94:	e5cc      	b.n	8000630 <main+0x54>
 8000a96:	bf00      	nop
 8000a98:	40020000 	.word	0x40020000
 8000a9c:	40020400 	.word	0x40020400
 8000aa0:	2000008b 	.word	0x2000008b
 8000aa4:	2000008c 	.word	0x2000008c
 8000aa8:	2000008d 	.word	0x2000008d
 8000aac:	20000138 	.word	0x20000138
 8000ab0:	20000238 	.word	0x20000238
 8000ab4:	20000088 	.word	0x20000088
 8000ab8:	20000089 	.word	0x20000089
 8000abc:	2000024c 	.word	0x2000024c

08000ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b094      	sub	sp, #80	; 0x50
 8000ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	2234      	movs	r2, #52	; 0x34
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f004 fa40 	bl	8004f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad4:	f107 0308 	add.w	r3, r7, #8
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	4b29      	ldr	r3, [pc, #164]	; (8000b90 <SystemClock_Config+0xd0>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	4a28      	ldr	r2, [pc, #160]	; (8000b90 <SystemClock_Config+0xd0>)
 8000aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af2:	6413      	str	r3, [r2, #64]	; 0x40
 8000af4:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <SystemClock_Config+0xd0>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b00:	2300      	movs	r3, #0
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <SystemClock_Config+0xd4>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b0c:	4a21      	ldr	r2, [pc, #132]	; (8000b94 <SystemClock_Config+0xd4>)
 8000b0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <SystemClock_Config+0xd4>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b20:	2302      	movs	r3, #2
 8000b22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b24:	2301      	movs	r3, #1
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b28:	2310      	movs	r3, #16
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b30:	2300      	movs	r3, #0
 8000b32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b34:	2308      	movs	r3, #8
 8000b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000b38:	2354      	movs	r3, #84	; 0x54
 8000b3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b44:	2302      	movs	r3, #2
 8000b46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f002 fe3d 	bl	80037cc <HAL_RCC_OscConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b58:	f000 fa82 	bl	8001060 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5c:	230f      	movs	r3, #15
 8000b5e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b60:	2302      	movs	r3, #2
 8000b62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b72:	f107 0308 	add.w	r3, r7, #8
 8000b76:	2102      	movs	r1, #2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f002 fbbb 	bl	80032f4 <HAL_RCC_ClockConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000b84:	f000 fa6c 	bl	8001060 <Error_Handler>
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3750      	adds	r7, #80	; 0x50
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40007000 	.word	0x40007000

08000b98 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8000baa:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <MX_ADC2_Init+0xa0>)
 8000bac:	4a23      	ldr	r2, [pc, #140]	; (8000c3c <MX_ADC2_Init+0xa4>)
 8000bae:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bb0:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <MX_ADC2_Init+0xa0>)
 8000bb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bb6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <MX_ADC2_Init+0xa0>)
 8000bba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000bbe:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <MX_ADC2_Init+0xa0>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <MX_ADC2_Init+0xa0>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <MX_ADC2_Init+0xa0>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000bd4:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <MX_ADC2_Init+0xa0>)
 8000bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000bdc:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <MX_ADC2_Init+0xa0>)
 8000bde:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000be2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <MX_ADC2_Init+0xa0>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000bea:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <MX_ADC2_Init+0xa0>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <MX_ADC2_Init+0xa0>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <MX_ADC2_Init+0xa0>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bfe:	480e      	ldr	r0, [pc, #56]	; (8000c38 <MX_ADC2_Init+0xa0>)
 8000c00:	f000 fe88 	bl	8001914 <HAL_ADC_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_ADC2_Init+0x76>
  {
    Error_Handler();
 8000c0a:	f000 fa29 	bl	8001060 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000c0e:	230f      	movs	r3, #15
 8000c10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4806      	ldr	r0, [pc, #24]	; (8000c38 <MX_ADC2_Init+0xa0>)
 8000c20:	f000 ffcc 	bl	8001bbc <HAL_ADC_ConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_ADC2_Init+0x96>
  {
    Error_Handler();
 8000c2a:	f000 fa19 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200000f0 	.word	0x200000f0
 8000c3c:	40012100 	.word	0x40012100

08000c40 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c46:	463b      	mov	r3, r7
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_DAC_Init+0x4c>)
 8000c50:	4a0f      	ldr	r2, [pc, #60]	; (8000c90 <MX_DAC_Init+0x50>)
 8000c52:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_DAC_Init+0x4c>)
 8000c56:	f001 fb72 	bl	800233e <HAL_DAC_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000c60:	f000 f9fe 	bl	8001060 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000c64:	2324      	movs	r3, #36	; 0x24
 8000c66:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	2200      	movs	r2, #0
 8000c70:	4619      	mov	r1, r3
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <MX_DAC_Init+0x4c>)
 8000c74:	f001 fc93 	bl	800259e <HAL_DAC_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000c7e:	f000 f9ef 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000238 	.word	0x20000238
 8000c90:	40007400 	.word	0x40007400

08000c94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000c9a:	4a18      	ldr	r2, [pc, #96]	; (8000cfc <MX_SPI2_Init+0x68>)
 8000c9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c9e:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000ca0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd8:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000ce0:	220a      	movs	r2, #10
 8000ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <MX_SPI2_Init+0x64>)
 8000ce6:	f002 ffcb 	bl	8003c80 <HAL_SPI_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000cf0:	f000 f9b6 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000098 	.word	0x20000098
 8000cfc:	40003800 	.word	0x40003800

08000d00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d14:	463b      	mov	r3, r7
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1905;
 8000d30:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d32:	f240 7271 	movw	r2, #1905	; 0x771
 8000d36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d44:	4813      	ldr	r0, [pc, #76]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d46:	f002 ffff 	bl	8003d48 <HAL_TIM_Base_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d50:	f000 f986 	bl	8001060 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d5a:	f107 0308 	add.w	r3, r7, #8
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d62:	f003 f973 	bl	800404c <HAL_TIM_ConfigClockSource>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d6c:	f000 f978 	bl	8001060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d70:	2320      	movs	r3, #32
 8000d72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d78:	463b      	mov	r3, r7
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d7e:	f003 fb89 	bl	8004494 <HAL_TIMEx_MasterConfigSynchronization>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d88:	f000 f96a 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000ee0 	.word	0x20000ee0

08000d98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9e:	f107 0308 	add.w	r3, r7, #8
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dac:	463b      	mov	r3, r7
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <MX_TIM3_Init+0x94>)
 8000db6:	4a1e      	ldr	r2, [pc, #120]	; (8000e30 <MX_TIM3_Init+0x98>)
 8000db8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 335;
 8000dba:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <MX_TIM3_Init+0x94>)
 8000dbc:	f240 124f 	movw	r2, #335	; 0x14f
 8000dc0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <MX_TIM3_Init+0x94>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 62499;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <MX_TIM3_Init+0x94>)
 8000dca:	f24f 4223 	movw	r2, #62499	; 0xf423
 8000dce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <MX_TIM3_Init+0x94>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <MX_TIM3_Init+0x94>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ddc:	4813      	ldr	r0, [pc, #76]	; (8000e2c <MX_TIM3_Init+0x94>)
 8000dde:	f002 ffb3 	bl	8003d48 <HAL_TIM_Base_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000de8:	f000 f93a 	bl	8001060 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000df2:	f107 0308 	add.w	r3, r7, #8
 8000df6:	4619      	mov	r1, r3
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <MX_TIM3_Init+0x94>)
 8000dfa:	f003 f927 	bl	800404c <HAL_TIM_ConfigClockSource>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000e04:	f000 f92c 	bl	8001060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e10:	463b      	mov	r3, r7
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_TIM3_Init+0x94>)
 8000e16:	f003 fb3d 	bl	8004494 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e20:	f000 f91e 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000138 	.word	0x20000138
 8000e30:	40000400 	.word	0x40000400

08000e34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e38:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <MX_USART2_UART_Init+0x48>)
 8000e3a:	4a11      	ldr	r2, [pc, #68]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_USART2_UART_Init+0x48>)
 8000e40:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <MX_USART2_UART_Init+0x50>)
 8000e42:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <MX_USART2_UART_Init+0x48>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_USART2_UART_Init+0x48>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e50:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <MX_USART2_UART_Init+0x48>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_USART2_UART_Init+0x48>)
 8000e58:	220c      	movs	r2, #12
 8000e5a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <MX_USART2_UART_Init+0x48>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_USART2_UART_Init+0x48>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e68:	4804      	ldr	r0, [pc, #16]	; (8000e7c <MX_USART2_UART_Init+0x48>)
 8000e6a:	f003 fba3 	bl	80045b4 <HAL_UART_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8000e74:	f000 f8f4 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000f20 	.word	0x20000f20
 8000e80:	40004400 	.word	0x40004400
 8000e84:	0007a120 	.word	0x0007a120

08000e88 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <MX_DMA_Init+0x78>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a1a      	ldr	r2, [pc, #104]	; (8000f00 <MX_DMA_Init+0x78>)
 8000e98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_DMA_Init+0x78>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_DMA_Init+0x78>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a13      	ldr	r2, [pc, #76]	; (8000f00 <MX_DMA_Init+0x78>)
 8000eb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_DMA_Init+0x78>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2010      	movs	r0, #16
 8000ecc:	f001 fa01 	bl	80022d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ed0:	2010      	movs	r0, #16
 8000ed2:	f001 fa1a 	bl	800230a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2011      	movs	r0, #17
 8000edc:	f001 f9f9 	bl	80022d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ee0:	2011      	movs	r0, #17
 8000ee2:	f001 fa12 	bl	800230a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	203a      	movs	r0, #58	; 0x3a
 8000eec:	f001 f9f1 	bl	80022d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ef0:	203a      	movs	r0, #58	; 0x3a
 8000ef2:	f001 fa0a 	bl	800230a <HAL_NVIC_EnableIRQ>

}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800

08000f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	4b4b      	ldr	r3, [pc, #300]	; (800104c <MX_GPIO_Init+0x148>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a4a      	ldr	r2, [pc, #296]	; (800104c <MX_GPIO_Init+0x148>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b48      	ldr	r3, [pc, #288]	; (800104c <MX_GPIO_Init+0x148>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b44      	ldr	r3, [pc, #272]	; (800104c <MX_GPIO_Init+0x148>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a43      	ldr	r2, [pc, #268]	; (800104c <MX_GPIO_Init+0x148>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b41      	ldr	r3, [pc, #260]	; (800104c <MX_GPIO_Init+0x148>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	4b3d      	ldr	r3, [pc, #244]	; (800104c <MX_GPIO_Init+0x148>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a3c      	ldr	r2, [pc, #240]	; (800104c <MX_GPIO_Init+0x148>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b3a      	ldr	r3, [pc, #232]	; (800104c <MX_GPIO_Init+0x148>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000f74:	4836      	ldr	r0, [pc, #216]	; (8001050 <MX_GPIO_Init+0x14c>)
 8000f76:	f002 f971 	bl	800325c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2130      	movs	r1, #48	; 0x30
 8000f7e:	4835      	ldr	r0, [pc, #212]	; (8001054 <MX_GPIO_Init+0x150>)
 8000f80:	f002 f96c 	bl	800325c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f84:	2340      	movs	r3, #64	; 0x40
 8000f86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	4619      	mov	r1, r3
 8000f96:	482e      	ldr	r0, [pc, #184]	; (8001050 <MX_GPIO_Init+0x14c>)
 8000f98:	f001 ffb6 	bl	8002f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000f9c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000fa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa2:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <MX_GPIO_Init+0x154>)
 8000fa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4827      	ldr	r0, [pc, #156]	; (8001050 <MX_GPIO_Init+0x14c>)
 8000fb2:	f001 ffa9 	bl	8002f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fb6:	2310      	movs	r3, #16
 8000fb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fba:	4b27      	ldr	r3, [pc, #156]	; (8001058 <MX_GPIO_Init+0x154>)
 8000fbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4824      	ldr	r0, [pc, #144]	; (800105c <MX_GPIO_Init+0x158>)
 8000fca:	f001 ff9d 	bl	8002f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000fce:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000fd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	481a      	ldr	r0, [pc, #104]	; (8001050 <MX_GPIO_Init+0x14c>)
 8000fe8:	f001 ff8e 	bl	8002f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000fec:	2330      	movs	r3, #48	; 0x30
 8000fee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	4619      	mov	r1, r3
 8001002:	4814      	ldr	r0, [pc, #80]	; (8001054 <MX_GPIO_Init+0x150>)
 8001004:	f001 ff80 	bl	8002f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001008:	f44f 7380 	mov.w	r3, #256	; 0x100
 800100c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800100e:	4b12      	ldr	r3, [pc, #72]	; (8001058 <MX_GPIO_Init+0x154>)
 8001010:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001012:	2302      	movs	r3, #2
 8001014:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	4619      	mov	r1, r3
 800101c:	480d      	ldr	r0, [pc, #52]	; (8001054 <MX_GPIO_Init+0x150>)
 800101e:	f001 ff73 	bl	8002f08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	200a      	movs	r0, #10
 8001028:	f001 f953 	bl	80022d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800102c:	200a      	movs	r0, #10
 800102e:	f001 f96c 	bl	800230a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	2017      	movs	r0, #23
 8001038:	f001 f94b 	bl	80022d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800103c:	2017      	movs	r0, #23
 800103e:	f001 f964 	bl	800230a <HAL_NVIC_EnableIRQ>

}
 8001042:	bf00      	nop
 8001044:	3720      	adds	r7, #32
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000
 8001054:	40020400 	.word	0x40020400
 8001058:	10110000 	.word	0x10110000
 800105c:	40020800 	.word	0x40020800

08001060 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <wave_init>:
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	e01e      	b.n	80010ba <wave_init+0x4a>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	ee07 3a90 	vmov	s15, r3
 8001082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001086:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80010d4 <wave_init+0x64>
 800108a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800108e:	eeb0 0a67 	vmov.f32	s0, s15
 8001092:	f003 ff67 	bl	8004f64 <sinf>
 8001096:	eeb0 7a40 	vmov.f32	s14, s0
 800109a:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80010d8 <wave_init+0x68>
 800109e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010a6:	ee17 3a90 	vmov	r3, s15
 80010aa:	b219      	sxth	r1, r3
 80010ac:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <wave_init+0x6c>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3301      	adds	r3, #1
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2bff      	cmp	r3, #255	; 0xff
 80010be:	dddd      	ble.n	800107c <wave_init+0xc>
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <wave_init+0x70>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	801a      	strh	r2, [r3, #0]
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <wave_init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	801a      	strh	r2, [r3, #0]
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	3cc90fdb 	.word	0x3cc90fdb
 80010d8:	44bb8000 	.word	0x44bb8000
 80010dc:	20000fc8 	.word	0x20000fc8
 80010e0:	20000fc6 	.word	0x20000fc6
 80010e4:	20000fc4 	.word	0x20000fc4

080010e8 <wave_fillbuffer>:
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	70fb      	strb	r3, [r7, #3]
 80010f4:	4613      	mov	r3, r2
 80010f6:	803b      	strh	r3, [r7, #0]
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	e05e      	b.n	80011bc <wave_fillbuffer+0xd4>
 80010fe:	2300      	movs	r3, #0
 8001100:	817b      	strh	r3, [r7, #10]
 8001102:	78fb      	ldrb	r3, [r7, #3]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d014      	beq.n	8001132 <wave_fillbuffer+0x4a>
 8001108:	2b03      	cmp	r3, #3
 800110a:	d023      	beq.n	8001154 <wave_fillbuffer+0x6c>
 800110c:	2b01      	cmp	r3, #1
 800110e:	d149      	bne.n	80011a4 <wave_fillbuffer+0xbc>
 8001110:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <wave_fillbuffer+0xe8>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	b29b      	uxth	r3, r3
 8001118:	461a      	mov	r2, r3
 800111a:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <wave_fillbuffer+0xec>)
 800111c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001120:	817b      	strh	r3, [r7, #10]
 8001122:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <wave_fillbuffer+0xe8>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	f203 238e 	addw	r3, r3, #654	; 0x28e
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <wave_fillbuffer+0xe8>)
 800112e:	801a      	strh	r2, [r3, #0]
 8001130:	e038      	b.n	80011a4 <wave_fillbuffer+0xbc>
 8001132:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <wave_fillbuffer+0xf0>)
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	0a1b      	lsrs	r3, r3, #8
 8001138:	b29b      	uxth	r3, r3
 800113a:	461a      	mov	r2, r3
 800113c:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <wave_fillbuffer+0xec>)
 800113e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001142:	817b      	strh	r3, [r7, #10]
 8001144:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <wave_fillbuffer+0xf0>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	f203 3309 	addw	r3, r3, #777	; 0x309
 800114c:	b29a      	uxth	r2, r3
 800114e:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <wave_fillbuffer+0xf0>)
 8001150:	801a      	strh	r2, [r3, #0]
 8001152:	e027      	b.n	80011a4 <wave_fillbuffer+0xbc>
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <wave_fillbuffer+0xe8>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	b29b      	uxth	r3, r3
 800115c:	461a      	mov	r2, r3
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <wave_fillbuffer+0xec>)
 8001160:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001164:	105b      	asrs	r3, r3, #1
 8001166:	b21b      	sxth	r3, r3
 8001168:	b29a      	uxth	r2, r3
 800116a:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <wave_fillbuffer+0xf0>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	0a1b      	lsrs	r3, r3, #8
 8001170:	b29b      	uxth	r3, r3
 8001172:	4619      	mov	r1, r3
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <wave_fillbuffer+0xec>)
 8001176:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 800117a:	105b      	asrs	r3, r3, #1
 800117c:	b21b      	sxth	r3, r3
 800117e:	b29b      	uxth	r3, r3
 8001180:	4413      	add	r3, r2
 8001182:	b29b      	uxth	r3, r3
 8001184:	817b      	strh	r3, [r7, #10]
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <wave_fillbuffer+0xe8>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	f203 238e 	addw	r3, r3, #654	; 0x28e
 800118e:	b29a      	uxth	r2, r3
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <wave_fillbuffer+0xe8>)
 8001192:	801a      	strh	r2, [r3, #0]
 8001194:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <wave_fillbuffer+0xf0>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	f203 3309 	addw	r3, r3, #777	; 0x309
 800119c:	b29a      	uxth	r2, r3
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <wave_fillbuffer+0xf0>)
 80011a0:	801a      	strh	r2, [r3, #0]
 80011a2:	bf00      	nop
 80011a4:	897a      	ldrh	r2, [r7, #10]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	440b      	add	r3, r1
 80011ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80011b2:	b292      	uxth	r2, r2
 80011b4:	801a      	strh	r2, [r3, #0]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	3301      	adds	r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	883b      	ldrh	r3, [r7, #0]
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	db9c      	blt.n	80010fe <wave_fillbuffer+0x16>
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	20000fc6 	.word	0x20000fc6
 80011d4:	20000fc8 	.word	0x20000fc8
 80011d8:	20000fc4 	.word	0x20000fc4

080011dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <HAL_MspInit+0x4c>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	4a0f      	ldr	r2, [pc, #60]	; (8001228 <HAL_MspInit+0x4c>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f0:	6453      	str	r3, [r2, #68]	; 0x44
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <HAL_MspInit+0x4c>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <HAL_MspInit+0x4c>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a08      	ldr	r2, [pc, #32]	; (8001228 <HAL_MspInit+0x4c>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_MspInit+0x4c>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800

0800122c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a2e      	ldr	r2, [pc, #184]	; (8001304 <HAL_ADC_MspInit+0xd8>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d156      	bne.n	80012fc <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <HAL_ADC_MspInit+0xdc>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	4a2c      	ldr	r2, [pc, #176]	; (8001308 <HAL_ADC_MspInit+0xdc>)
 8001258:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800125c:	6453      	str	r3, [r2, #68]	; 0x44
 800125e:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <HAL_ADC_MspInit+0xdc>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b26      	ldr	r3, [pc, #152]	; (8001308 <HAL_ADC_MspInit+0xdc>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a25      	ldr	r2, [pc, #148]	; (8001308 <HAL_ADC_MspInit+0xdc>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b23      	ldr	r3, [pc, #140]	; (8001308 <HAL_ADC_MspInit+0xdc>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration    
    PC5     ------> ADC2_IN15 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001286:	2320      	movs	r3, #32
 8001288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800128a:	2303      	movs	r3, #3
 800128c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	481c      	ldr	r0, [pc, #112]	; (800130c <HAL_ADC_MspInit+0xe0>)
 800129a:	f001 fe35 	bl	8002f08 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 800129e:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <HAL_ADC_MspInit+0xe4>)
 80012a0:	4a1c      	ldr	r2, [pc, #112]	; (8001314 <HAL_ADC_MspInit+0xe8>)
 80012a2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <HAL_ADC_MspInit+0xe4>)
 80012a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012aa:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ac:	4b18      	ldr	r3, [pc, #96]	; (8001310 <HAL_ADC_MspInit+0xe4>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <HAL_ADC_MspInit+0xe4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <HAL_ADC_MspInit+0xe4>)
 80012ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012be:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <HAL_ADC_MspInit+0xe4>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_ADC_MspInit+0xe4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <HAL_ADC_MspInit+0xe4>)
 80012ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80012d4:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <HAL_ADC_MspInit+0xe4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <HAL_ADC_MspInit+0xe4>)
 80012dc:	2200      	movs	r2, #0
 80012de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80012e0:	480b      	ldr	r0, [pc, #44]	; (8001310 <HAL_ADC_MspInit+0xe4>)
 80012e2:	f001 fa33 	bl	800274c <HAL_DMA_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80012ec:	f7ff feb8 	bl	8001060 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a07      	ldr	r2, [pc, #28]	; (8001310 <HAL_ADC_MspInit+0xe4>)
 80012f4:	639a      	str	r2, [r3, #56]	; 0x38
 80012f6:	4a06      	ldr	r2, [pc, #24]	; (8001310 <HAL_ADC_MspInit+0xe4>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80012fc:	bf00      	nop
 80012fe:	3728      	adds	r7, #40	; 0x28
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40012100 	.word	0x40012100
 8001308:	40023800 	.word	0x40023800
 800130c:	40020800 	.word	0x40020800
 8001310:	20000f60 	.word	0x20000f60
 8001314:	40026440 	.word	0x40026440

08001318 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a2f      	ldr	r2, [pc, #188]	; (80013f4 <HAL_DAC_MspInit+0xdc>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d157      	bne.n	80013ea <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <HAL_DAC_MspInit+0xe0>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	4a2d      	ldr	r2, [pc, #180]	; (80013f8 <HAL_DAC_MspInit+0xe0>)
 8001344:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
 800134a:	4b2b      	ldr	r3, [pc, #172]	; (80013f8 <HAL_DAC_MspInit+0xe0>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <HAL_DAC_MspInit+0xe0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a26      	ldr	r2, [pc, #152]	; (80013f8 <HAL_DAC_MspInit+0xe0>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <HAL_DAC_MspInit+0xe0>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001372:	2310      	movs	r3, #16
 8001374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001376:	2303      	movs	r3, #3
 8001378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	481d      	ldr	r0, [pc, #116]	; (80013fc <HAL_DAC_MspInit+0xe4>)
 8001386:	f001 fdbf 	bl	8002f08 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800138a:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <HAL_DAC_MspInit+0xe8>)
 800138c:	4a1d      	ldr	r2, [pc, #116]	; (8001404 <HAL_DAC_MspInit+0xec>)
 800138e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001390:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <HAL_DAC_MspInit+0xe8>)
 8001392:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001396:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <HAL_DAC_MspInit+0xe8>)
 800139a:	2240      	movs	r2, #64	; 0x40
 800139c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <HAL_DAC_MspInit+0xe8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <HAL_DAC_MspInit+0xe8>)
 80013a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013aa:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <HAL_DAC_MspInit+0xe8>)
 80013ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013b2:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_DAC_MspInit+0xe8>)
 80013b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ba:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 80013bc:	4b10      	ldr	r3, [pc, #64]	; (8001400 <HAL_DAC_MspInit+0xe8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <HAL_DAC_MspInit+0xe8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013c8:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <HAL_DAC_MspInit+0xe8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80013ce:	480c      	ldr	r0, [pc, #48]	; (8001400 <HAL_DAC_MspInit+0xe8>)
 80013d0:	f001 f9bc 	bl	800274c <HAL_DMA_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 80013da:	f7ff fe41 	bl	8001060 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <HAL_DAC_MspInit+0xe8>)
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	4a06      	ldr	r2, [pc, #24]	; (8001400 <HAL_DAC_MspInit+0xe8>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80013ea:	bf00      	nop
 80013ec:	3728      	adds	r7, #40	; 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40007400 	.word	0x40007400
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020000 	.word	0x40020000
 8001400:	20000178 	.word	0x20000178
 8001404:	40026088 	.word	0x40026088

08001408 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a30      	ldr	r2, [pc, #192]	; (80014e8 <HAL_SPI_MspInit+0xe0>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d15a      	bne.n	80014e0 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <HAL_SPI_MspInit+0xe4>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a2e      	ldr	r2, [pc, #184]	; (80014ec <HAL_SPI_MspInit+0xe4>)
 8001434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b2c      	ldr	r3, [pc, #176]	; (80014ec <HAL_SPI_MspInit+0xe4>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b28      	ldr	r3, [pc, #160]	; (80014ec <HAL_SPI_MspInit+0xe4>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a27      	ldr	r2, [pc, #156]	; (80014ec <HAL_SPI_MspInit+0xe4>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b25      	ldr	r3, [pc, #148]	; (80014ec <HAL_SPI_MspInit+0xe4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	4b21      	ldr	r3, [pc, #132]	; (80014ec <HAL_SPI_MspInit+0xe4>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a20      	ldr	r2, [pc, #128]	; (80014ec <HAL_SPI_MspInit+0xe4>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <HAL_SPI_MspInit+0xe4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800147e:	2302      	movs	r3, #2
 8001480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	2303      	movs	r3, #3
 800148c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800148e:	2307      	movs	r3, #7
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	4815      	ldr	r0, [pc, #84]	; (80014f0 <HAL_SPI_MspInit+0xe8>)
 800149a:	f001 fd35 	bl	8002f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800149e:	2304      	movs	r3, #4
 80014a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014ae:	2305      	movs	r3, #5
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	480d      	ldr	r0, [pc, #52]	; (80014f0 <HAL_SPI_MspInit+0xe8>)
 80014ba:	f001 fd25 	bl	8002f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014cc:	2303      	movs	r3, #3
 80014ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014d0:	2305      	movs	r3, #5
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4619      	mov	r1, r3
 80014da:	4806      	ldr	r0, [pc, #24]	; (80014f4 <HAL_SPI_MspInit+0xec>)
 80014dc:	f001 fd14 	bl	8002f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	; 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40003800 	.word	0x40003800
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020800 	.word	0x40020800
 80014f4:	40020400 	.word	0x40020400

080014f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001508:	d10e      	bne.n	8001528 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	4b16      	ldr	r3, [pc, #88]	; (8001568 <HAL_TIM_Base_MspInit+0x70>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	4a15      	ldr	r2, [pc, #84]	; (8001568 <HAL_TIM_Base_MspInit+0x70>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6413      	str	r3, [r2, #64]	; 0x40
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <HAL_TIM_Base_MspInit+0x70>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001526:	e01a      	b.n	800155e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0f      	ldr	r2, [pc, #60]	; (800156c <HAL_TIM_Base_MspInit+0x74>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d115      	bne.n	800155e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HAL_TIM_Base_MspInit+0x70>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <HAL_TIM_Base_MspInit+0x70>)
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	6413      	str	r3, [r2, #64]	; 0x40
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_TIM_Base_MspInit+0x70>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2100      	movs	r1, #0
 8001552:	201d      	movs	r0, #29
 8001554:	f000 febd 	bl	80022d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001558:	201d      	movs	r0, #29
 800155a:	f000 fed6 	bl	800230a <HAL_NVIC_EnableIRQ>
}
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800
 800156c:	40000400 	.word	0x40000400

08001570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a30      	ldr	r2, [pc, #192]	; (8001650 <HAL_UART_MspInit+0xe0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d159      	bne.n	8001646 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <HAL_UART_MspInit+0xe4>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a2e      	ldr	r2, [pc, #184]	; (8001654 <HAL_UART_MspInit+0xe4>)
 800159c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b2c      	ldr	r3, [pc, #176]	; (8001654 <HAL_UART_MspInit+0xe4>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b28      	ldr	r3, [pc, #160]	; (8001654 <HAL_UART_MspInit+0xe4>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a27      	ldr	r2, [pc, #156]	; (8001654 <HAL_UART_MspInit+0xe4>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b25      	ldr	r3, [pc, #148]	; (8001654 <HAL_UART_MspInit+0xe4>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015ca:	230c      	movs	r3, #12
 80015cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015da:	2307      	movs	r3, #7
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	481c      	ldr	r0, [pc, #112]	; (8001658 <HAL_UART_MspInit+0xe8>)
 80015e6:	f001 fc8f 	bl	8002f08 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <HAL_UART_MspInit+0xec>)
 80015ec:	4a1c      	ldr	r2, [pc, #112]	; (8001660 <HAL_UART_MspInit+0xf0>)
 80015ee:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80015f0:	4b1a      	ldr	r3, [pc, #104]	; (800165c <HAL_UART_MspInit+0xec>)
 80015f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015f6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_UART_MspInit+0xec>)
 80015fa:	2240      	movs	r2, #64	; 0x40
 80015fc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <HAL_UART_MspInit+0xec>)
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_UART_MspInit+0xec>)
 8001606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800160a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800160c:	4b13      	ldr	r3, [pc, #76]	; (800165c <HAL_UART_MspInit+0xec>)
 800160e:	2200      	movs	r2, #0
 8001610:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_UART_MspInit+0xec>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001618:	4b10      	ldr	r3, [pc, #64]	; (800165c <HAL_UART_MspInit+0xec>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <HAL_UART_MspInit+0xec>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <HAL_UART_MspInit+0xec>)
 8001626:	2200      	movs	r2, #0
 8001628:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800162a:	480c      	ldr	r0, [pc, #48]	; (800165c <HAL_UART_MspInit+0xec>)
 800162c:	f001 f88e 	bl	800274c <HAL_DMA_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001636:	f7ff fd13 	bl	8001060 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <HAL_UART_MspInit+0xec>)
 800163e:	631a      	str	r2, [r3, #48]	; 0x30
 8001640:	4a06      	ldr	r2, [pc, #24]	; (800165c <HAL_UART_MspInit+0xec>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001646:	bf00      	nop
 8001648:	3728      	adds	r7, #40	; 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40004400 	.word	0x40004400
 8001654:	40023800 	.word	0x40023800
 8001658:	40020000 	.word	0x40020000
 800165c:	200001d8 	.word	0x200001d8
 8001660:	400260a0 	.word	0x400260a0

08001664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001676:	e7fe      	b.n	8001676 <HardFault_Handler+0x4>

08001678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800167c:	e7fe      	b.n	800167c <MemManage_Handler+0x4>

0800167e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001682:	e7fe      	b.n	8001682 <BusFault_Handler+0x4>

08001684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <UsageFault_Handler+0x4>

0800168a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b8:	f000 f90c 	bl	80018d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}

080016c0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	//HAL_TIM_Base_Start_IT(&htim4);
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80016c4:	2010      	movs	r0, #16
 80016c6:	f001 fdfd 	bl	80032c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <DMA1_Stream5_IRQHandler+0x10>)
 80016d6:	f001 f9af 	bl	8002a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000178 	.word	0x20000178

080016e4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <DMA1_Stream6_IRQHandler+0x10>)
 80016ea:	f001 f9a5 	bl	8002a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200001d8 	.word	0x200001d8

080016f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	//HAL_TIM_Base_Start_IT(&htim4);
if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)){
 80016fc:	2140      	movs	r1, #64	; 0x40
 80016fe:	480d      	ldr	r0, [pc, #52]	; (8001734 <EXTI9_5_IRQHandler+0x3c>)
 8001700:	f001 fd94 	bl	800322c <HAL_GPIO_ReadPin>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <EXTI9_5_IRQHandler+0x1a>
	start_recording = 1;
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <EXTI9_5_IRQHandler+0x40>)
 800170c:	2201      	movs	r2, #1
 800170e:	701a      	strb	r2, [r3, #0]
 8001710:	e002      	b.n	8001718 <EXTI9_5_IRQHandler+0x20>
}else{
	start_recording = 0;
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <EXTI9_5_IRQHandler+0x40>)
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]
}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001718:	2080      	movs	r0, #128	; 0x80
 800171a:	f001 fdd3 	bl	80032c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800171e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001722:	f001 fdcf 	bl	80032c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001726:	f44f 7000 	mov.w	r0, #512	; 0x200
 800172a:	f001 fdcb 	bl	80032c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40020000 	.word	0x40020000
 8001738:	20000095 	.word	0x20000095

0800173c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
if(led_flash_1){HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);}
 8001740:	4b10      	ldr	r3, [pc, #64]	; (8001784 <TIM3_IRQHandler+0x48>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d004      	beq.n	8001754 <TIM3_IRQHandler+0x18>
 800174a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800174e:	480e      	ldr	r0, [pc, #56]	; (8001788 <TIM3_IRQHandler+0x4c>)
 8001750:	f001 fd9d 	bl	800328e <HAL_GPIO_TogglePin>
if(led_flash_2){HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);}
 8001754:	4b0d      	ldr	r3, [pc, #52]	; (800178c <TIM3_IRQHandler+0x50>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <TIM3_IRQHandler+0x2a>
 800175e:	2120      	movs	r1, #32
 8001760:	480b      	ldr	r0, [pc, #44]	; (8001790 <TIM3_IRQHandler+0x54>)
 8001762:	f001 fd94 	bl	800328e <HAL_GPIO_TogglePin>
if(led_flash_3){HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);}
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <TIM3_IRQHandler+0x58>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <TIM3_IRQHandler+0x3c>
 8001770:	2110      	movs	r1, #16
 8001772:	4807      	ldr	r0, [pc, #28]	; (8001790 <TIM3_IRQHandler+0x54>)
 8001774:	f001 fd8b 	bl	800328e <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001778:	4807      	ldr	r0, [pc, #28]	; (8001798 <TIM3_IRQHandler+0x5c>)
 800177a:	f002 fb5f 	bl	8003e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2000008b 	.word	0x2000008b
 8001788:	40020000 	.word	0x40020000
 800178c:	2000008c 	.word	0x2000008c
 8001790:	40020400 	.word	0x40020400
 8001794:	2000008d 	.word	0x2000008d
 8001798:	20000138 	.word	0x20000138

0800179c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <DMA2_Stream2_IRQHandler+0x10>)
 80017a2:	f001 f949 	bl	8002a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000f60 	.word	0x20000f60

080017b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <SystemInit+0x28>)
 80017b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ba:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <SystemInit+0x28>)
 80017bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <SystemInit+0x28>)
 80017c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017ca:	609a      	str	r2, [r3, #8]
#endif
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <Reset_Handler>:
 80017dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001814 <LoopFillZerobss+0x14>
 80017e0:	2100      	movs	r1, #0
 80017e2:	e003      	b.n	80017ec <LoopCopyDataInit>

080017e4 <CopyDataInit>:
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <LoopFillZerobss+0x18>)
 80017e6:	585b      	ldr	r3, [r3, r1]
 80017e8:	5043      	str	r3, [r0, r1]
 80017ea:	3104      	adds	r1, #4

080017ec <LoopCopyDataInit>:
 80017ec:	480b      	ldr	r0, [pc, #44]	; (800181c <LoopFillZerobss+0x1c>)
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <LoopFillZerobss+0x20>)
 80017f0:	1842      	adds	r2, r0, r1
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d3f6      	bcc.n	80017e4 <CopyDataInit>
 80017f6:	4a0b      	ldr	r2, [pc, #44]	; (8001824 <LoopFillZerobss+0x24>)
 80017f8:	e002      	b.n	8001800 <LoopFillZerobss>

080017fa <FillZerobss>:
 80017fa:	2300      	movs	r3, #0
 80017fc:	f842 3b04 	str.w	r3, [r2], #4

08001800 <LoopFillZerobss>:
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <LoopFillZerobss+0x28>)
 8001802:	429a      	cmp	r2, r3
 8001804:	d3f9      	bcc.n	80017fa <FillZerobss>
 8001806:	f7ff ffd3 	bl	80017b0 <SystemInit>
 800180a:	f003 fb7f 	bl	8004f0c <__libc_init_array>
 800180e:	f7fe fee5 	bl	80005dc <main>
 8001812:	4770      	bx	lr
 8001814:	20020000 	.word	0x20020000
 8001818:	08005e14 	.word	0x08005e14
 800181c:	20000000 	.word	0x20000000
 8001820:	2000006c 	.word	0x2000006c
 8001824:	2000006c 	.word	0x2000006c
 8001828:	200011cc 	.word	0x200011cc

0800182c <ADC_IRQHandler>:
 800182c:	e7fe      	b.n	800182c <ADC_IRQHandler>
	...

08001830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <HAL_Init+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <HAL_Init+0x40>)
 800183a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800183e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <HAL_Init+0x40>)
 8001846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800184a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a07      	ldr	r2, [pc, #28]	; (8001870 <HAL_Init+0x40>)
 8001852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001856:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001858:	2003      	movs	r0, #3
 800185a:	f000 fd2f 	bl	80022bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185e:	2000      	movs	r0, #0
 8001860:	f000 f808 	bl	8001874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001864:	f7ff fcba 	bl	80011dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40023c00 	.word	0x40023c00

08001874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_InitTick+0x54>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_InitTick+0x58>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188a:	fbb3 f3f1 	udiv	r3, r3, r1
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f000 fd47 	bl	8002326 <HAL_SYSTICK_Config>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e00e      	b.n	80018c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b0f      	cmp	r3, #15
 80018a6:	d80a      	bhi.n	80018be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a8:	2200      	movs	r2, #0
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f000 fd0f 	bl	80022d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b4:	4a06      	ldr	r2, [pc, #24]	; (80018d0 <HAL_InitTick+0x5c>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e000      	b.n	80018c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000060 	.word	0x20000060
 80018cc:	20000068 	.word	0x20000068
 80018d0:	20000064 	.word	0x20000064

080018d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_IncTick+0x20>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_IncTick+0x24>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <HAL_IncTick+0x24>)
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000068 	.word	0x20000068
 80018f8:	200011c8 	.word	0x200011c8

080018fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <HAL_GetTick+0x14>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	200011c8 	.word	0x200011c8

08001914 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e033      	b.n	8001992 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	2b00      	cmp	r3, #0
 8001930:	d109      	bne.n	8001946 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff fc7a 	bl	800122c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	2b00      	cmp	r3, #0
 8001950:	d118      	bne.n	8001984 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800195a:	f023 0302 	bic.w	r3, r3, #2
 800195e:	f043 0202 	orr.w	r2, r3, #2
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 fa5a 	bl	8001e20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f023 0303 	bic.w	r3, r3, #3
 800197a:	f043 0201 	orr.w	r2, r3, #1
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	641a      	str	r2, [r3, #64]	; 0x40
 8001982:	e001      	b.n	8001988 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001990:	7bfb      	ldrb	r3, [r7, #15]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d101      	bne.n	80019ba <HAL_ADC_Start_DMA+0x1e>
 80019b6:	2302      	movs	r3, #2
 80019b8:	e0cc      	b.n	8001b54 <HAL_ADC_Start_DMA+0x1b8>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d018      	beq.n	8001a02 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0201 	orr.w	r2, r2, #1
 80019de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019e0:	4b5e      	ldr	r3, [pc, #376]	; (8001b5c <HAL_ADC_Start_DMA+0x1c0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a5e      	ldr	r2, [pc, #376]	; (8001b60 <HAL_ADC_Start_DMA+0x1c4>)
 80019e6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ea:	0c9a      	lsrs	r2, r3, #18
 80019ec:	4613      	mov	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4413      	add	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80019f4:	e002      	b.n	80019fc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f9      	bne.n	80019f6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	f040 80a0 	bne.w	8001b52 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a1a:	f023 0301 	bic.w	r3, r3, #1
 8001a1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d007      	beq.n	8001a44 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a3c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a50:	d106      	bne.n	8001a60 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	f023 0206 	bic.w	r2, r3, #6
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	645a      	str	r2, [r3, #68]	; 0x44
 8001a5e:	e002      	b.n	8001a66 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a6e:	4b3d      	ldr	r3, [pc, #244]	; (8001b64 <HAL_ADC_Start_DMA+0x1c8>)
 8001a70:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a76:	4a3c      	ldr	r2, [pc, #240]	; (8001b68 <HAL_ADC_Start_DMA+0x1cc>)
 8001a78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7e:	4a3b      	ldr	r2, [pc, #236]	; (8001b6c <HAL_ADC_Start_DMA+0x1d0>)
 8001a80:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a86:	4a3a      	ldr	r2, [pc, #232]	; (8001b70 <HAL_ADC_Start_DMA+0x1d4>)
 8001a88:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a92:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001aa2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ab2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	334c      	adds	r3, #76	; 0x4c
 8001abe:	4619      	mov	r1, r3
 8001ac0:	68ba      	ldr	r2, [r7, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f000 fef0 	bl	80028a8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 031f 	and.w	r3, r3, #31
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d12a      	bne.n	8001b2a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a26      	ldr	r2, [pc, #152]	; (8001b74 <HAL_ADC_Start_DMA+0x1d8>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d015      	beq.n	8001b0a <HAL_ADC_Start_DMA+0x16e>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a25      	ldr	r2, [pc, #148]	; (8001b78 <HAL_ADC_Start_DMA+0x1dc>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d105      	bne.n	8001af4 <HAL_ADC_Start_DMA+0x158>
 8001ae8:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <HAL_ADC_Start_DMA+0x1c8>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 031f 	and.w	r3, r3, #31
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00a      	beq.n	8001b0a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a20      	ldr	r2, [pc, #128]	; (8001b7c <HAL_ADC_Start_DMA+0x1e0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d129      	bne.n	8001b52 <HAL_ADC_Start_DMA+0x1b6>
 8001afe:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_ADC_Start_DMA+0x1c8>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 031f 	and.w	r3, r3, #31
 8001b06:	2b0f      	cmp	r3, #15
 8001b08:	d823      	bhi.n	8001b52 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d11c      	bne.n	8001b52 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	e013      	b.n	8001b52 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a11      	ldr	r2, [pc, #68]	; (8001b74 <HAL_ADC_Start_DMA+0x1d8>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d10e      	bne.n	8001b52 <HAL_ADC_Start_DMA+0x1b6>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d107      	bne.n	8001b52 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b50:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000060 	.word	0x20000060
 8001b60:	431bde83 	.word	0x431bde83
 8001b64:	40012300 	.word	0x40012300
 8001b68:	08002019 	.word	0x08002019
 8001b6c:	080020d3 	.word	0x080020d3
 8001b70:	080020ef 	.word	0x080020ef
 8001b74:	40012000 	.word	0x40012000
 8001b78:	40012100 	.word	0x40012100
 8001b7c:	40012200 	.word	0x40012200

08001b80 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x1c>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e113      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x244>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b09      	cmp	r3, #9
 8001be6:	d925      	bls.n	8001c34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68d9      	ldr	r1, [r3, #12]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3b1e      	subs	r3, #30
 8001bfe:	2207      	movs	r2, #7
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43da      	mvns	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	400a      	ands	r2, r1
 8001c0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68d9      	ldr	r1, [r3, #12]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	4603      	mov	r3, r0
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	4403      	add	r3, r0
 8001c26:	3b1e      	subs	r3, #30
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	e022      	b.n	8001c7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6919      	ldr	r1, [r3, #16]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	2207      	movs	r2, #7
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	400a      	ands	r2, r1
 8001c56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6919      	ldr	r1, [r3, #16]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	4618      	mov	r0, r3
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4403      	add	r3, r0
 8001c70:	409a      	lsls	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b06      	cmp	r3, #6
 8001c80:	d824      	bhi.n	8001ccc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	3b05      	subs	r3, #5
 8001c94:	221f      	movs	r2, #31
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43da      	mvns	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	3b05      	subs	r3, #5
 8001cbe:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	635a      	str	r2, [r3, #52]	; 0x34
 8001cca:	e04c      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b0c      	cmp	r3, #12
 8001cd2:	d824      	bhi.n	8001d1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3b23      	subs	r3, #35	; 0x23
 8001ce6:	221f      	movs	r2, #31
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43da      	mvns	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	400a      	ands	r2, r1
 8001cf4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	4618      	mov	r0, r3
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3b23      	subs	r3, #35	; 0x23
 8001d10:	fa00 f203 	lsl.w	r2, r0, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d1c:	e023      	b.n	8001d66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3b41      	subs	r3, #65	; 0x41
 8001d30:	221f      	movs	r2, #31
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43da      	mvns	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	400a      	ands	r2, r1
 8001d3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	3b41      	subs	r3, #65	; 0x41
 8001d5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d66:	4b29      	ldr	r3, [pc, #164]	; (8001e0c <HAL_ADC_ConfigChannel+0x250>)
 8001d68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a28      	ldr	r2, [pc, #160]	; (8001e10 <HAL_ADC_ConfigChannel+0x254>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d10f      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x1d8>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b12      	cmp	r3, #18
 8001d7a:	d10b      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a1d      	ldr	r2, [pc, #116]	; (8001e10 <HAL_ADC_ConfigChannel+0x254>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d12b      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x23a>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a1c      	ldr	r2, [pc, #112]	; (8001e14 <HAL_ADC_ConfigChannel+0x258>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d003      	beq.n	8001db0 <HAL_ADC_ConfigChannel+0x1f4>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b11      	cmp	r3, #17
 8001dae:	d122      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a11      	ldr	r2, [pc, #68]	; (8001e14 <HAL_ADC_ConfigChannel+0x258>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d111      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dd2:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <HAL_ADC_ConfigChannel+0x25c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a11      	ldr	r2, [pc, #68]	; (8001e1c <HAL_ADC_ConfigChannel+0x260>)
 8001dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ddc:	0c9a      	lsrs	r2, r3, #18
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001de8:	e002      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	3b01      	subs	r3, #1
 8001dee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f9      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	40012300 	.word	0x40012300
 8001e10:	40012000 	.word	0x40012000
 8001e14:	10000012 	.word	0x10000012
 8001e18:	20000060 	.word	0x20000060
 8001e1c:	431bde83 	.word	0x431bde83

08001e20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e28:	4b79      	ldr	r3, [pc, #484]	; (8002010 <ADC_Init+0x1f0>)
 8001e2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	431a      	orrs	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6859      	ldr	r1, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	021a      	lsls	r2, r3, #8
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6859      	ldr	r1, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6899      	ldr	r1, [r3, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb2:	4a58      	ldr	r2, [pc, #352]	; (8002014 <ADC_Init+0x1f4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d022      	beq.n	8001efe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ec6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6899      	ldr	r1, [r3, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ee8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6899      	ldr	r1, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	e00f      	b.n	8001f1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0202 	bic.w	r2, r2, #2
 8001f2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6899      	ldr	r1, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	7e1b      	ldrb	r3, [r3, #24]
 8001f38:	005a      	lsls	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d01b      	beq.n	8001f84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6859      	ldr	r1, [r3, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	3b01      	subs	r3, #1
 8001f78:	035a      	lsls	r2, r3, #13
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	e007      	b.n	8001f94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	051a      	lsls	r2, r3, #20
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6899      	ldr	r1, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fd6:	025a      	lsls	r2, r3, #9
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6899      	ldr	r1, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	029a      	lsls	r2, r3, #10
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	609a      	str	r2, [r3, #8]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	40012300 	.word	0x40012300
 8002014:	0f000001 	.word	0x0f000001

08002018 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002024:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800202e:	2b00      	cmp	r3, #0
 8002030:	d13c      	bne.n	80020ac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d12b      	bne.n	80020a4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002050:	2b00      	cmp	r3, #0
 8002052:	d127      	bne.n	80020a4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800205e:	2b00      	cmp	r3, #0
 8002060:	d006      	beq.n	8002070 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800206c:	2b00      	cmp	r3, #0
 800206e:	d119      	bne.n	80020a4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0220 	bic.w	r2, r2, #32
 800207e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d105      	bne.n	80020a4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	f043 0201 	orr.w	r2, r3, #1
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f7ff fd6b 	bl	8001b80 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80020aa:	e00e      	b.n	80020ca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f7ff fd75 	bl	8001ba8 <HAL_ADC_ErrorCallback>
}
 80020be:	e004      	b.n	80020ca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	4798      	blx	r3
}
 80020ca:	bf00      	nop
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b084      	sub	sp, #16
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020de:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f7ff fd57 	bl	8001b94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b084      	sub	sp, #16
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2240      	movs	r2, #64	; 0x40
 8002100:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f043 0204 	orr.w	r2, r3, #4
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f7ff fd4a 	bl	8001ba8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002114:	bf00      	nop
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002138:	4013      	ands	r3, r2
 800213a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800214c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214e:	4a04      	ldr	r2, [pc, #16]	; (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	60d3      	str	r3, [r2, #12]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002168:	4b04      	ldr	r3, [pc, #16]	; (800217c <__NVIC_GetPriorityGrouping+0x18>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	0a1b      	lsrs	r3, r3, #8
 800216e:	f003 0307 	and.w	r3, r3, #7
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	2b00      	cmp	r3, #0
 8002190:	db0b      	blt.n	80021aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	f003 021f 	and.w	r2, r3, #31
 8002198:	4907      	ldr	r1, [pc, #28]	; (80021b8 <__NVIC_EnableIRQ+0x38>)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	2001      	movs	r0, #1
 80021a2:	fa00 f202 	lsl.w	r2, r0, r2
 80021a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000e100 	.word	0xe000e100

080021bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	6039      	str	r1, [r7, #0]
 80021c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	db0a      	blt.n	80021e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	490c      	ldr	r1, [pc, #48]	; (8002208 <__NVIC_SetPriority+0x4c>)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	0112      	lsls	r2, r2, #4
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	440b      	add	r3, r1
 80021e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e4:	e00a      	b.n	80021fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4908      	ldr	r1, [pc, #32]	; (800220c <__NVIC_SetPriority+0x50>)
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	3b04      	subs	r3, #4
 80021f4:	0112      	lsls	r2, r2, #4
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	440b      	add	r3, r1
 80021fa:	761a      	strb	r2, [r3, #24]
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	e000e100 	.word	0xe000e100
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	; 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f1c3 0307 	rsb	r3, r3, #7
 800222a:	2b04      	cmp	r3, #4
 800222c:	bf28      	it	cs
 800222e:	2304      	movcs	r3, #4
 8002230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3304      	adds	r3, #4
 8002236:	2b06      	cmp	r3, #6
 8002238:	d902      	bls.n	8002240 <NVIC_EncodePriority+0x30>
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3b03      	subs	r3, #3
 800223e:	e000      	b.n	8002242 <NVIC_EncodePriority+0x32>
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002244:	f04f 32ff 	mov.w	r2, #4294967295
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43da      	mvns	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	401a      	ands	r2, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002258:	f04f 31ff 	mov.w	r1, #4294967295
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa01 f303 	lsl.w	r3, r1, r3
 8002262:	43d9      	mvns	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	4313      	orrs	r3, r2
         );
}
 800226a:	4618      	mov	r0, r3
 800226c:	3724      	adds	r7, #36	; 0x24
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3b01      	subs	r3, #1
 8002284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002288:	d301      	bcc.n	800228e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800228a:	2301      	movs	r3, #1
 800228c:	e00f      	b.n	80022ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <SysTick_Config+0x40>)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3b01      	subs	r3, #1
 8002294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002296:	210f      	movs	r1, #15
 8002298:	f04f 30ff 	mov.w	r0, #4294967295
 800229c:	f7ff ff8e 	bl	80021bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <SysTick_Config+0x40>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a6:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <SysTick_Config+0x40>)
 80022a8:	2207      	movs	r2, #7
 80022aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	e000e010 	.word	0xe000e010

080022bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff ff29 	bl	800211c <__NVIC_SetPriorityGrouping>
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b086      	sub	sp, #24
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	4603      	mov	r3, r0
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022e4:	f7ff ff3e 	bl	8002164 <__NVIC_GetPriorityGrouping>
 80022e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68b9      	ldr	r1, [r7, #8]
 80022ee:	6978      	ldr	r0, [r7, #20]
 80022f0:	f7ff ff8e 	bl	8002210 <NVIC_EncodePriority>
 80022f4:	4602      	mov	r2, r0
 80022f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff5d 	bl	80021bc <__NVIC_SetPriority>
}
 8002302:	bf00      	nop
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	4603      	mov	r3, r0
 8002312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff31 	bl	8002180 <__NVIC_EnableIRQ>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff ffa2 	bl	8002278 <SysTick_Config>
 8002334:	4603      	mov	r3, r0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e014      	b.n	800237a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	791b      	ldrb	r3, [r3, #4]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d105      	bne.n	8002366 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7fe ffd9 	bl	8001318 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2202      	movs	r2, #2
 800236a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	795b      	ldrb	r3, [r3, #5]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_DAC_Start_DMA+0x1e>
 800239e:	2302      	movs	r3, #2
 80023a0:	e08e      	b.n	80024c0 <HAL_DAC_Start_DMA+0x13c>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2202      	movs	r2, #2
 80023ac:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d12a      	bne.n	800240a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4a43      	ldr	r2, [pc, #268]	; (80024c8 <HAL_DAC_Start_DMA+0x144>)
 80023ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	4a42      	ldr	r2, [pc, #264]	; (80024cc <HAL_DAC_Start_DMA+0x148>)
 80023c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a41      	ldr	r2, [pc, #260]	; (80024d0 <HAL_DAC_Start_DMA+0x14c>)
 80023ca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023da:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d009      	beq.n	80023f6 <HAL_DAC_Start_DMA+0x72>
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d00c      	beq.n	8002400 <HAL_DAC_Start_DMA+0x7c>
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d000      	beq.n	80023ec <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80023ea:	e039      	b.n	8002460 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	3308      	adds	r3, #8
 80023f2:	617b      	str	r3, [r7, #20]
        break;
 80023f4:	e034      	b.n	8002460 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	330c      	adds	r3, #12
 80023fc:	617b      	str	r3, [r7, #20]
        break;
 80023fe:	e02f      	b.n	8002460 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3310      	adds	r3, #16
 8002406:	617b      	str	r3, [r7, #20]
        break;
 8002408:	e02a      	b.n	8002460 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	4a31      	ldr	r2, [pc, #196]	; (80024d4 <HAL_DAC_Start_DMA+0x150>)
 8002410:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	4a30      	ldr	r2, [pc, #192]	; (80024d8 <HAL_DAC_Start_DMA+0x154>)
 8002418:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	4a2f      	ldr	r2, [pc, #188]	; (80024dc <HAL_DAC_Start_DMA+0x158>)
 8002420:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002430:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	2b04      	cmp	r3, #4
 8002436:	d009      	beq.n	800244c <HAL_DAC_Start_DMA+0xc8>
 8002438:	2b08      	cmp	r3, #8
 800243a:	d00c      	beq.n	8002456 <HAL_DAC_Start_DMA+0xd2>
 800243c:	2b00      	cmp	r3, #0
 800243e:	d000      	beq.n	8002442 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002440:	e00e      	b.n	8002460 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	3314      	adds	r3, #20
 8002448:	617b      	str	r3, [r7, #20]
        break;
 800244a:	e009      	b.n	8002460 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	3318      	adds	r3, #24
 8002452:	617b      	str	r3, [r7, #20]
        break;
 8002454:	e004      	b.n	8002460 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	331c      	adds	r3, #28
 800245c:	617b      	str	r3, [r7, #20]
        break;
 800245e:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10f      	bne.n	8002486 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002474:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6898      	ldr	r0, [r3, #8]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	f000 fa12 	bl	80028a8 <HAL_DMA_Start_IT>
 8002484:	e00e      	b.n	80024a4 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002494:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	68d8      	ldr	r0, [r3, #12]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	f000 fa02 	bl	80028a8 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6819      	ldr	r1, [r3, #0]
 80024aa:	2201      	movs	r2, #1
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	409a      	lsls	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	08002639 	.word	0x08002639
 80024cc:	0800265b 	.word	0x0800265b
 80024d0:	08002677 	.word	0x08002677
 80024d4:	080026e1 	.word	0x080026e1
 80024d8:	08002703 	.word	0x08002703
 80024dc:	0800271f 	.word	0x0800271f

080024e0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43da      	mvns	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	400a      	ands	r2, r1
 8002506:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6819      	ldr	r1, [r3, #0]
 800250e:	2201      	movs	r2, #1
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43da      	mvns	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	400a      	ands	r2, r1
 800251e:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d107      	bne.n	8002536 <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	4618      	mov	r0, r3
 800252c:	f000 fa14 	bl	8002958 <HAL_DMA_Abort>
 8002530:	4603      	mov	r3, r0
 8002532:	73fb      	strb	r3, [r7, #15]
 8002534:	e006      	b.n	8002544 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	4618      	mov	r0, r3
 800253c:	f000 fa0c 	bl	8002958 <HAL_DMA_Abort>
 8002540:	4603      	mov	r3, r0
 8002542:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2204      	movs	r2, #4
 800254e:	711a      	strb	r2, [r3, #4]
 8002550:	e002      	b.n	8002558 <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8002558:	7bfb      	ldrb	r3, [r7, #15]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800259e:	b480      	push	{r7}
 80025a0:	b087      	sub	sp, #28
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	795b      	ldrb	r3, [r3, #5]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_DAC_ConfigChannel+0x20>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e036      	b.n	800262c <HAL_DAC_ConfigChannel+0x8e>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2201      	movs	r2, #1
 80025c2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2202      	movs	r2, #2
 80025c8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80025d2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	4013      	ands	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6819      	ldr	r1, [r3, #0]
 800260c:	22c0      	movs	r2, #192	; 0xc0
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43da      	mvns	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	400a      	ands	r2, r1
 800261c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2201      	movs	r2, #1
 8002622:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	371c      	adds	r7, #28
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002644:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f7ff ff8b 	bl	8002562 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2201      	movs	r2, #1
 8002650:	711a      	strb	r2, [r3, #4]
}
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002666:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f7ff ff84 	bl	8002576 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800266e:	bf00      	nop
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002682:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	f043 0204 	orr.w	r2, r3, #4
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f7ff ff7a 	bl	800258a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2201      	movs	r2, #1
 800269a:	711a      	strb	r2, [r3, #4]
}
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ec:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f7ff ffd8 	bl	80026a4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2201      	movs	r2, #1
 80026f8:	711a      	strb	r2, [r3, #4]
}
 80026fa:	bf00      	nop
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b084      	sub	sp, #16
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f7ff ffd1 	bl	80026b8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b084      	sub	sp, #16
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272a:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	f043 0204 	orr.w	r2, r3, #4
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f7ff ffc7 	bl	80026cc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	711a      	strb	r2, [r3, #4]
}
 8002744:	bf00      	nop
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002758:	f7ff f8d0 	bl	80018fc <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e099      	b.n	800289c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0201 	bic.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002788:	e00f      	b.n	80027aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800278a:	f7ff f8b7 	bl	80018fc <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b05      	cmp	r3, #5
 8002796:	d908      	bls.n	80027aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2220      	movs	r2, #32
 800279c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2203      	movs	r2, #3
 80027a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e078      	b.n	800289c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1e8      	bne.n	800278a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	4b38      	ldr	r3, [pc, #224]	; (80028a4 <HAL_DMA_Init+0x158>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	2b04      	cmp	r3, #4
 8002802:	d107      	bne.n	8002814 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	4313      	orrs	r3, r2
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	4313      	orrs	r3, r2
 8002812:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f023 0307 	bic.w	r3, r3, #7
 800282a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	4313      	orrs	r3, r2
 8002834:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	2b04      	cmp	r3, #4
 800283c:	d117      	bne.n	800286e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4313      	orrs	r3, r2
 8002846:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00e      	beq.n	800286e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 fadf 	bl	8002e14 <DMA_CheckFifoParam>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2240      	movs	r2, #64	; 0x40
 8002860:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800286a:	2301      	movs	r3, #1
 800286c:	e016      	b.n	800289c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 fa96 	bl	8002da8 <DMA_CalcBaseAndBitshift>
 800287c:	4603      	mov	r3, r0
 800287e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002884:	223f      	movs	r2, #63	; 0x3f
 8002886:	409a      	lsls	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	f010803f 	.word	0xf010803f

080028a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_DMA_Start_IT+0x26>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e040      	b.n	8002950 <HAL_DMA_Start_IT+0xa8>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d12f      	bne.n	8002942 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2202      	movs	r2, #2
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 fa28 	bl	8002d4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002900:	223f      	movs	r2, #63	; 0x3f
 8002902:	409a      	lsls	r2, r3
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0216 	orr.w	r2, r2, #22
 8002916:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0208 	orr.w	r2, r2, #8
 800292e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	e005      	b.n	800294e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800294a:	2302      	movs	r3, #2
 800294c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800294e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002964:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002966:	f7fe ffc9 	bl	80018fc <HAL_GetTick>
 800296a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d008      	beq.n	800298a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2280      	movs	r2, #128	; 0x80
 800297c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e052      	b.n	8002a30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0216 	bic.w	r2, r2, #22
 8002998:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695a      	ldr	r2, [r3, #20]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d103      	bne.n	80029ba <HAL_DMA_Abort+0x62>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0208 	bic.w	r2, r2, #8
 80029c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0201 	bic.w	r2, r2, #1
 80029d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029da:	e013      	b.n	8002a04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029dc:	f7fe ff8e 	bl	80018fc <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b05      	cmp	r3, #5
 80029e8:	d90c      	bls.n	8002a04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2220      	movs	r2, #32
 80029ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2203      	movs	r2, #3
 80029fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e015      	b.n	8002a30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1e4      	bne.n	80029dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a16:	223f      	movs	r2, #63	; 0x3f
 8002a18:	409a      	lsls	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a44:	4b92      	ldr	r3, [pc, #584]	; (8002c90 <HAL_DMA_IRQHandler+0x258>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a92      	ldr	r2, [pc, #584]	; (8002c94 <HAL_DMA_IRQHandler+0x25c>)
 8002a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4e:	0a9b      	lsrs	r3, r3, #10
 8002a50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a62:	2208      	movs	r2, #8
 8002a64:	409a      	lsls	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d01a      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d013      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0204 	bic.w	r2, r2, #4
 8002a8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a90:	2208      	movs	r2, #8
 8002a92:	409a      	lsls	r2, r3
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9c:	f043 0201 	orr.w	r2, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	409a      	lsls	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d012      	beq.n	8002ada <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00b      	beq.n	8002ada <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad2:	f043 0202 	orr.w	r2, r3, #2
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ade:	2204      	movs	r2, #4
 8002ae0:	409a      	lsls	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d012      	beq.n	8002b10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00b      	beq.n	8002b10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afc:	2204      	movs	r2, #4
 8002afe:	409a      	lsls	r2, r3
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b08:	f043 0204 	orr.w	r2, r3, #4
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b14:	2210      	movs	r2, #16
 8002b16:	409a      	lsls	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d043      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d03c      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b32:	2210      	movs	r2, #16
 8002b34:	409a      	lsls	r2, r3
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d018      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d108      	bne.n	8002b68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d024      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	4798      	blx	r3
 8002b66:	e01f      	b.n	8002ba8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d01b      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	4798      	blx	r3
 8002b78:	e016      	b.n	8002ba8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d107      	bne.n	8002b98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0208 	bic.w	r2, r2, #8
 8002b96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bac:	2220      	movs	r2, #32
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 808e 	beq.w	8002cd6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 8086 	beq.w	8002cd6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bce:	2220      	movs	r2, #32
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b05      	cmp	r3, #5
 8002be0:	d136      	bne.n	8002c50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0216 	bic.w	r2, r2, #22
 8002bf0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695a      	ldr	r2, [r3, #20]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d103      	bne.n	8002c12 <HAL_DMA_IRQHandler+0x1da>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d007      	beq.n	8002c22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0208 	bic.w	r2, r2, #8
 8002c20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c26:	223f      	movs	r2, #63	; 0x3f
 8002c28:	409a      	lsls	r2, r3
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d07d      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	4798      	blx	r3
        }
        return;
 8002c4e:	e078      	b.n	8002d42 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d01c      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d108      	bne.n	8002c7e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d030      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	4798      	blx	r3
 8002c7c:	e02b      	b.n	8002cd6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d027      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	4798      	blx	r3
 8002c8e:	e022      	b.n	8002cd6 <HAL_DMA_IRQHandler+0x29e>
 8002c90:	20000060 	.word	0x20000060
 8002c94:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10f      	bne.n	8002cc6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0210 	bic.w	r2, r2, #16
 8002cb4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d032      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d022      	beq.n	8002d30 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2205      	movs	r2, #5
 8002cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0201 	bic.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	3301      	adds	r3, #1
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d307      	bcc.n	8002d1e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1f2      	bne.n	8002d02 <HAL_DMA_IRQHandler+0x2ca>
 8002d1c:	e000      	b.n	8002d20 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d1e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	4798      	blx	r3
 8002d40:	e000      	b.n	8002d44 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002d42:	bf00      	nop
    }
  }
}
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop

08002d4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b40      	cmp	r3, #64	; 0x40
 8002d78:	d108      	bne.n	8002d8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d8a:	e007      	b.n	8002d9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	60da      	str	r2, [r3, #12]
}
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	3b10      	subs	r3, #16
 8002db8:	4a14      	ldr	r2, [pc, #80]	; (8002e0c <DMA_CalcBaseAndBitshift+0x64>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	091b      	lsrs	r3, r3, #4
 8002dc0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002dc2:	4a13      	ldr	r2, [pc, #76]	; (8002e10 <DMA_CalcBaseAndBitshift+0x68>)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d909      	bls.n	8002dea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dde:	f023 0303 	bic.w	r3, r3, #3
 8002de2:	1d1a      	adds	r2, r3, #4
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	659a      	str	r2, [r3, #88]	; 0x58
 8002de8:	e007      	b.n	8002dfa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002df2:	f023 0303 	bic.w	r3, r3, #3
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	aaaaaaab 	.word	0xaaaaaaab
 8002e10:	08005a2c 	.word	0x08005a2c

08002e14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d11f      	bne.n	8002e6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d855      	bhi.n	8002ee0 <DMA_CheckFifoParam+0xcc>
 8002e34:	a201      	add	r2, pc, #4	; (adr r2, 8002e3c <DMA_CheckFifoParam+0x28>)
 8002e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3a:	bf00      	nop
 8002e3c:	08002e4d 	.word	0x08002e4d
 8002e40:	08002e5f 	.word	0x08002e5f
 8002e44:	08002e4d 	.word	0x08002e4d
 8002e48:	08002ee1 	.word	0x08002ee1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d045      	beq.n	8002ee4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e5c:	e042      	b.n	8002ee4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e66:	d13f      	bne.n	8002ee8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e6c:	e03c      	b.n	8002ee8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e76:	d121      	bne.n	8002ebc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d836      	bhi.n	8002eec <DMA_CheckFifoParam+0xd8>
 8002e7e:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <DMA_CheckFifoParam+0x70>)
 8002e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e84:	08002e95 	.word	0x08002e95
 8002e88:	08002e9b 	.word	0x08002e9b
 8002e8c:	08002e95 	.word	0x08002e95
 8002e90:	08002ead 	.word	0x08002ead
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]
      break;
 8002e98:	e02f      	b.n	8002efa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d024      	beq.n	8002ef0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eaa:	e021      	b.n	8002ef0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eb4:	d11e      	bne.n	8002ef4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002eba:	e01b      	b.n	8002ef4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d902      	bls.n	8002ec8 <DMA_CheckFifoParam+0xb4>
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d003      	beq.n	8002ece <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ec6:	e018      	b.n	8002efa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	73fb      	strb	r3, [r7, #15]
      break;
 8002ecc:	e015      	b.n	8002efa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00e      	beq.n	8002ef8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
      break;
 8002ede:	e00b      	b.n	8002ef8 <DMA_CheckFifoParam+0xe4>
      break;
 8002ee0:	bf00      	nop
 8002ee2:	e00a      	b.n	8002efa <DMA_CheckFifoParam+0xe6>
      break;
 8002ee4:	bf00      	nop
 8002ee6:	e008      	b.n	8002efa <DMA_CheckFifoParam+0xe6>
      break;
 8002ee8:	bf00      	nop
 8002eea:	e006      	b.n	8002efa <DMA_CheckFifoParam+0xe6>
      break;
 8002eec:	bf00      	nop
 8002eee:	e004      	b.n	8002efa <DMA_CheckFifoParam+0xe6>
      break;
 8002ef0:	bf00      	nop
 8002ef2:	e002      	b.n	8002efa <DMA_CheckFifoParam+0xe6>
      break;   
 8002ef4:	bf00      	nop
 8002ef6:	e000      	b.n	8002efa <DMA_CheckFifoParam+0xe6>
      break;
 8002ef8:	bf00      	nop
    }
  } 
  
  return status; 
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b089      	sub	sp, #36	; 0x24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61fb      	str	r3, [r7, #28]
 8002f22:	e165      	b.n	80031f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f24:	2201      	movs	r2, #1
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4013      	ands	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	f040 8154 	bne.w	80031ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d00b      	beq.n	8002f62 <HAL_GPIO_Init+0x5a>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d007      	beq.n	8002f62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f56:	2b11      	cmp	r3, #17
 8002f58:	d003      	beq.n	8002f62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b12      	cmp	r3, #18
 8002f60:	d130      	bne.n	8002fc4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	2203      	movs	r2, #3
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f98:	2201      	movs	r2, #1
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	091b      	lsrs	r3, r3, #4
 8002fae:	f003 0201 	and.w	r2, r3, #1
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	2203      	movs	r2, #3
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d003      	beq.n	8003004 <HAL_GPIO_Init+0xfc>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b12      	cmp	r3, #18
 8003002:	d123      	bne.n	800304c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	08da      	lsrs	r2, r3, #3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3208      	adds	r2, #8
 800300c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003010:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	220f      	movs	r2, #15
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	08da      	lsrs	r2, r3, #3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3208      	adds	r2, #8
 8003046:	69b9      	ldr	r1, [r7, #24]
 8003048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	2203      	movs	r2, #3
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 0203 	and.w	r2, r3, #3
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80ae 	beq.w	80031ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	4b5c      	ldr	r3, [pc, #368]	; (8003204 <HAL_GPIO_Init+0x2fc>)
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003096:	4a5b      	ldr	r2, [pc, #364]	; (8003204 <HAL_GPIO_Init+0x2fc>)
 8003098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800309c:	6453      	str	r3, [r2, #68]	; 0x44
 800309e:	4b59      	ldr	r3, [pc, #356]	; (8003204 <HAL_GPIO_Init+0x2fc>)
 80030a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030aa:	4a57      	ldr	r2, [pc, #348]	; (8003208 <HAL_GPIO_Init+0x300>)
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	089b      	lsrs	r3, r3, #2
 80030b0:	3302      	adds	r3, #2
 80030b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	220f      	movs	r2, #15
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43db      	mvns	r3, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4013      	ands	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4e      	ldr	r2, [pc, #312]	; (800320c <HAL_GPIO_Init+0x304>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d025      	beq.n	8003122 <HAL_GPIO_Init+0x21a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a4d      	ldr	r2, [pc, #308]	; (8003210 <HAL_GPIO_Init+0x308>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d01f      	beq.n	800311e <HAL_GPIO_Init+0x216>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a4c      	ldr	r2, [pc, #304]	; (8003214 <HAL_GPIO_Init+0x30c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d019      	beq.n	800311a <HAL_GPIO_Init+0x212>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a4b      	ldr	r2, [pc, #300]	; (8003218 <HAL_GPIO_Init+0x310>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d013      	beq.n	8003116 <HAL_GPIO_Init+0x20e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a4a      	ldr	r2, [pc, #296]	; (800321c <HAL_GPIO_Init+0x314>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d00d      	beq.n	8003112 <HAL_GPIO_Init+0x20a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a49      	ldr	r2, [pc, #292]	; (8003220 <HAL_GPIO_Init+0x318>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d007      	beq.n	800310e <HAL_GPIO_Init+0x206>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a48      	ldr	r2, [pc, #288]	; (8003224 <HAL_GPIO_Init+0x31c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d101      	bne.n	800310a <HAL_GPIO_Init+0x202>
 8003106:	2306      	movs	r3, #6
 8003108:	e00c      	b.n	8003124 <HAL_GPIO_Init+0x21c>
 800310a:	2307      	movs	r3, #7
 800310c:	e00a      	b.n	8003124 <HAL_GPIO_Init+0x21c>
 800310e:	2305      	movs	r3, #5
 8003110:	e008      	b.n	8003124 <HAL_GPIO_Init+0x21c>
 8003112:	2304      	movs	r3, #4
 8003114:	e006      	b.n	8003124 <HAL_GPIO_Init+0x21c>
 8003116:	2303      	movs	r3, #3
 8003118:	e004      	b.n	8003124 <HAL_GPIO_Init+0x21c>
 800311a:	2302      	movs	r3, #2
 800311c:	e002      	b.n	8003124 <HAL_GPIO_Init+0x21c>
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <HAL_GPIO_Init+0x21c>
 8003122:	2300      	movs	r3, #0
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	f002 0203 	and.w	r2, r2, #3
 800312a:	0092      	lsls	r2, r2, #2
 800312c:	4093      	lsls	r3, r2
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003134:	4934      	ldr	r1, [pc, #208]	; (8003208 <HAL_GPIO_Init+0x300>)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	089b      	lsrs	r3, r3, #2
 800313a:	3302      	adds	r3, #2
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003142:	4b39      	ldr	r3, [pc, #228]	; (8003228 <HAL_GPIO_Init+0x320>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	43db      	mvns	r3, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4013      	ands	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003166:	4a30      	ldr	r2, [pc, #192]	; (8003228 <HAL_GPIO_Init+0x320>)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800316c:	4b2e      	ldr	r3, [pc, #184]	; (8003228 <HAL_GPIO_Init+0x320>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003190:	4a25      	ldr	r2, [pc, #148]	; (8003228 <HAL_GPIO_Init+0x320>)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003196:	4b24      	ldr	r3, [pc, #144]	; (8003228 <HAL_GPIO_Init+0x320>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ba:	4a1b      	ldr	r2, [pc, #108]	; (8003228 <HAL_GPIO_Init+0x320>)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031c0:	4b19      	ldr	r3, [pc, #100]	; (8003228 <HAL_GPIO_Init+0x320>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031e4:	4a10      	ldr	r2, [pc, #64]	; (8003228 <HAL_GPIO_Init+0x320>)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	3301      	adds	r3, #1
 80031ee:	61fb      	str	r3, [r7, #28]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	2b0f      	cmp	r3, #15
 80031f4:	f67f ae96 	bls.w	8002f24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031f8:	bf00      	nop
 80031fa:	3724      	adds	r7, #36	; 0x24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	40023800 	.word	0x40023800
 8003208:	40013800 	.word	0x40013800
 800320c:	40020000 	.word	0x40020000
 8003210:	40020400 	.word	0x40020400
 8003214:	40020800 	.word	0x40020800
 8003218:	40020c00 	.word	0x40020c00
 800321c:	40021000 	.word	0x40021000
 8003220:	40021400 	.word	0x40021400
 8003224:	40021800 	.word	0x40021800
 8003228:	40013c00 	.word	0x40013c00

0800322c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	887b      	ldrh	r3, [r7, #2]
 800323e:	4013      	ands	r3, r2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003244:	2301      	movs	r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]
 8003248:	e001      	b.n	800324e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800324a:	2300      	movs	r3, #0
 800324c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800324e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	807b      	strh	r3, [r7, #2]
 8003268:	4613      	mov	r3, r2
 800326a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800326c:	787b      	ldrb	r3, [r7, #1]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003272:	887a      	ldrh	r2, [r7, #2]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003278:	e003      	b.n	8003282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800327a:	887b      	ldrh	r3, [r7, #2]
 800327c:	041a      	lsls	r2, r3, #16
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	619a      	str	r2, [r3, #24]
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	460b      	mov	r3, r1
 8003298:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	887b      	ldrh	r3, [r7, #2]
 80032a0:	401a      	ands	r2, r3
 80032a2:	887b      	ldrh	r3, [r7, #2]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d104      	bne.n	80032b2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80032a8:	887b      	ldrh	r3, [r7, #2]
 80032aa:	041a      	lsls	r2, r3, #16
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80032b0:	e002      	b.n	80032b8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80032b2:	887a      	ldrh	r2, [r7, #2]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	619a      	str	r2, [r3, #24]
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032ce:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	88fb      	ldrh	r3, [r7, #6]
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d006      	beq.n	80032e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032da:	4a05      	ldr	r2, [pc, #20]	; (80032f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fd f90e 	bl	8000504 <HAL_GPIO_EXTI_Callback>
  }
}
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40013c00 	.word	0x40013c00

080032f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0cc      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003308:	4b68      	ldr	r3, [pc, #416]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d90c      	bls.n	8003330 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003316:	4b65      	ldr	r3, [pc, #404]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800331e:	4b63      	ldr	r3, [pc, #396]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d001      	beq.n	8003330 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0b8      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d020      	beq.n	800337e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003348:	4b59      	ldr	r3, [pc, #356]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	4a58      	ldr	r2, [pc, #352]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003352:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003360:	4b53      	ldr	r3, [pc, #332]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4a52      	ldr	r2, [pc, #328]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800336a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800336c:	4b50      	ldr	r3, [pc, #320]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	494d      	ldr	r1, [pc, #308]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d044      	beq.n	8003414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	4b47      	ldr	r3, [pc, #284]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d119      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e07f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d003      	beq.n	80033b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b2:	4b3f      	ldr	r3, [pc, #252]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e06f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c2:	4b3b      	ldr	r3, [pc, #236]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e067      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033d2:	4b37      	ldr	r3, [pc, #220]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f023 0203 	bic.w	r2, r3, #3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	4934      	ldr	r1, [pc, #208]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033e4:	f7fe fa8a 	bl	80018fc <HAL_GetTick>
 80033e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ea:	e00a      	b.n	8003402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ec:	f7fe fa86 	bl	80018fc <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e04f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003402:	4b2b      	ldr	r3, [pc, #172]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 020c 	and.w	r2, r3, #12
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	429a      	cmp	r2, r3
 8003412:	d1eb      	bne.n	80033ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003414:	4b25      	ldr	r3, [pc, #148]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d20c      	bcs.n	800343c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003422:	4b22      	ldr	r3, [pc, #136]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800342a:	4b20      	ldr	r3, [pc, #128]	; (80034ac <HAL_RCC_ClockConfig+0x1b8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e032      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003448:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4916      	ldr	r1, [pc, #88]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	4313      	orrs	r3, r2
 8003458:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003466:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	490e      	ldr	r1, [pc, #56]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800347a:	f000 f855 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 800347e:	4601      	mov	r1, r0
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	4a0a      	ldr	r2, [pc, #40]	; (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 800348c:	5cd3      	ldrb	r3, [r2, r3]
 800348e:	fa21 f303 	lsr.w	r3, r1, r3
 8003492:	4a09      	ldr	r2, [pc, #36]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <HAL_RCC_ClockConfig+0x1c8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fe f9ea 	bl	8001874 <HAL_InitTick>

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40023c00 	.word	0x40023c00
 80034b0:	40023800 	.word	0x40023800
 80034b4:	08005a14 	.word	0x08005a14
 80034b8:	20000060 	.word	0x20000060
 80034bc:	20000064 	.word	0x20000064

080034c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c4:	4b03      	ldr	r3, [pc, #12]	; (80034d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034c6:	681b      	ldr	r3, [r3, #0]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20000060 	.word	0x20000060

080034d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034dc:	f7ff fff0 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 80034e0:	4601      	mov	r1, r0
 80034e2:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	0a9b      	lsrs	r3, r3, #10
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	4a03      	ldr	r2, [pc, #12]	; (80034fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ee:	5cd3      	ldrb	r3, [r2, r3]
 80034f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40023800 	.word	0x40023800
 80034fc:	08005a24 	.word	0x08005a24

08003500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003504:	f7ff ffdc 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 8003508:	4601      	mov	r1, r0
 800350a:	4b05      	ldr	r3, [pc, #20]	; (8003520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	0b5b      	lsrs	r3, r3, #13
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	4a03      	ldr	r2, [pc, #12]	; (8003524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003516:	5cd3      	ldrb	r3, [r2, r3]
 8003518:	fa21 f303 	lsr.w	r3, r1, r3
}
 800351c:	4618      	mov	r0, r3
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40023800 	.word	0x40023800
 8003524:	08005a24 	.word	0x08005a24

08003528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003542:	4b9f      	ldr	r3, [pc, #636]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x298>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b0c      	cmp	r3, #12
 800354c:	f200 8130 	bhi.w	80037b0 <HAL_RCC_GetSysClockFreq+0x288>
 8003550:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <HAL_RCC_GetSysClockFreq+0x30>)
 8003552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003556:	bf00      	nop
 8003558:	0800358d 	.word	0x0800358d
 800355c:	080037b1 	.word	0x080037b1
 8003560:	080037b1 	.word	0x080037b1
 8003564:	080037b1 	.word	0x080037b1
 8003568:	08003593 	.word	0x08003593
 800356c:	080037b1 	.word	0x080037b1
 8003570:	080037b1 	.word	0x080037b1
 8003574:	080037b1 	.word	0x080037b1
 8003578:	08003599 	.word	0x08003599
 800357c:	080037b1 	.word	0x080037b1
 8003580:	080037b1 	.word	0x080037b1
 8003584:	080037b1 	.word	0x080037b1
 8003588:	080036a7 	.word	0x080036a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800358c:	4b8d      	ldr	r3, [pc, #564]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x29c>)
 800358e:	613b      	str	r3, [r7, #16]
       break;
 8003590:	e111      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003592:	4b8d      	ldr	r3, [pc, #564]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003594:	613b      	str	r3, [r7, #16]
      break;
 8003596:	e10e      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003598:	4b89      	ldr	r3, [pc, #548]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x298>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035a0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035a2:	4b87      	ldr	r3, [pc, #540]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x298>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d023      	beq.n	80035f6 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ae:	4b84      	ldr	r3, [pc, #528]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x298>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	099b      	lsrs	r3, r3, #6
 80035b4:	f04f 0400 	mov.w	r4, #0
 80035b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	ea03 0501 	and.w	r5, r3, r1
 80035c4:	ea04 0602 	and.w	r6, r4, r2
 80035c8:	4a7f      	ldr	r2, [pc, #508]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80035ca:	fb02 f106 	mul.w	r1, r2, r6
 80035ce:	2200      	movs	r2, #0
 80035d0:	fb02 f205 	mul.w	r2, r2, r5
 80035d4:	440a      	add	r2, r1
 80035d6:	497c      	ldr	r1, [pc, #496]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80035d8:	fba5 0101 	umull	r0, r1, r5, r1
 80035dc:	1853      	adds	r3, r2, r1
 80035de:	4619      	mov	r1, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f04f 0400 	mov.w	r4, #0
 80035e6:	461a      	mov	r2, r3
 80035e8:	4623      	mov	r3, r4
 80035ea:	f7fc fe0b 	bl	8000204 <__aeabi_uldivmod>
 80035ee:	4603      	mov	r3, r0
 80035f0:	460c      	mov	r4, r1
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	e049      	b.n	800368a <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f6:	4b72      	ldr	r3, [pc, #456]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x298>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	099b      	lsrs	r3, r3, #6
 80035fc:	f04f 0400 	mov.w	r4, #0
 8003600:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	ea03 0501 	and.w	r5, r3, r1
 800360c:	ea04 0602 	and.w	r6, r4, r2
 8003610:	4629      	mov	r1, r5
 8003612:	4632      	mov	r2, r6
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	f04f 0400 	mov.w	r4, #0
 800361c:	0154      	lsls	r4, r2, #5
 800361e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003622:	014b      	lsls	r3, r1, #5
 8003624:	4619      	mov	r1, r3
 8003626:	4622      	mov	r2, r4
 8003628:	1b49      	subs	r1, r1, r5
 800362a:	eb62 0206 	sbc.w	r2, r2, r6
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	f04f 0400 	mov.w	r4, #0
 8003636:	0194      	lsls	r4, r2, #6
 8003638:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800363c:	018b      	lsls	r3, r1, #6
 800363e:	1a5b      	subs	r3, r3, r1
 8003640:	eb64 0402 	sbc.w	r4, r4, r2
 8003644:	f04f 0100 	mov.w	r1, #0
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	00e2      	lsls	r2, r4, #3
 800364e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003652:	00d9      	lsls	r1, r3, #3
 8003654:	460b      	mov	r3, r1
 8003656:	4614      	mov	r4, r2
 8003658:	195b      	adds	r3, r3, r5
 800365a:	eb44 0406 	adc.w	r4, r4, r6
 800365e:	f04f 0100 	mov.w	r1, #0
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	02a2      	lsls	r2, r4, #10
 8003668:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800366c:	0299      	lsls	r1, r3, #10
 800366e:	460b      	mov	r3, r1
 8003670:	4614      	mov	r4, r2
 8003672:	4618      	mov	r0, r3
 8003674:	4621      	mov	r1, r4
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f04f 0400 	mov.w	r4, #0
 800367c:	461a      	mov	r2, r3
 800367e:	4623      	mov	r3, r4
 8003680:	f7fc fdc0 	bl	8000204 <__aeabi_uldivmod>
 8003684:	4603      	mov	r3, r0
 8003686:	460c      	mov	r4, r1
 8003688:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800368a:	4b4d      	ldr	r3, [pc, #308]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x298>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	0c1b      	lsrs	r3, r3, #16
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	3301      	adds	r3, #1
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a2:	613b      	str	r3, [r7, #16]
      break;
 80036a4:	e087      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036a6:	4b46      	ldr	r3, [pc, #280]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x298>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036ae:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036b0:	4b43      	ldr	r3, [pc, #268]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x298>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d023      	beq.n	8003704 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036bc:	4b40      	ldr	r3, [pc, #256]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x298>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	099b      	lsrs	r3, r3, #6
 80036c2:	f04f 0400 	mov.w	r4, #0
 80036c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036ca:	f04f 0200 	mov.w	r2, #0
 80036ce:	ea03 0501 	and.w	r5, r3, r1
 80036d2:	ea04 0602 	and.w	r6, r4, r2
 80036d6:	4a3c      	ldr	r2, [pc, #240]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80036d8:	fb02 f106 	mul.w	r1, r2, r6
 80036dc:	2200      	movs	r2, #0
 80036de:	fb02 f205 	mul.w	r2, r2, r5
 80036e2:	440a      	add	r2, r1
 80036e4:	4938      	ldr	r1, [pc, #224]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80036e6:	fba5 0101 	umull	r0, r1, r5, r1
 80036ea:	1853      	adds	r3, r2, r1
 80036ec:	4619      	mov	r1, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f04f 0400 	mov.w	r4, #0
 80036f4:	461a      	mov	r2, r3
 80036f6:	4623      	mov	r3, r4
 80036f8:	f7fc fd84 	bl	8000204 <__aeabi_uldivmod>
 80036fc:	4603      	mov	r3, r0
 80036fe:	460c      	mov	r4, r1
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	e049      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003704:	4b2e      	ldr	r3, [pc, #184]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x298>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	099b      	lsrs	r3, r3, #6
 800370a:	f04f 0400 	mov.w	r4, #0
 800370e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	ea03 0501 	and.w	r5, r3, r1
 800371a:	ea04 0602 	and.w	r6, r4, r2
 800371e:	4629      	mov	r1, r5
 8003720:	4632      	mov	r2, r6
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	f04f 0400 	mov.w	r4, #0
 800372a:	0154      	lsls	r4, r2, #5
 800372c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003730:	014b      	lsls	r3, r1, #5
 8003732:	4619      	mov	r1, r3
 8003734:	4622      	mov	r2, r4
 8003736:	1b49      	subs	r1, r1, r5
 8003738:	eb62 0206 	sbc.w	r2, r2, r6
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	f04f 0400 	mov.w	r4, #0
 8003744:	0194      	lsls	r4, r2, #6
 8003746:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800374a:	018b      	lsls	r3, r1, #6
 800374c:	1a5b      	subs	r3, r3, r1
 800374e:	eb64 0402 	sbc.w	r4, r4, r2
 8003752:	f04f 0100 	mov.w	r1, #0
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	00e2      	lsls	r2, r4, #3
 800375c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003760:	00d9      	lsls	r1, r3, #3
 8003762:	460b      	mov	r3, r1
 8003764:	4614      	mov	r4, r2
 8003766:	195b      	adds	r3, r3, r5
 8003768:	eb44 0406 	adc.w	r4, r4, r6
 800376c:	f04f 0100 	mov.w	r1, #0
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	02a2      	lsls	r2, r4, #10
 8003776:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800377a:	0299      	lsls	r1, r3, #10
 800377c:	460b      	mov	r3, r1
 800377e:	4614      	mov	r4, r2
 8003780:	4618      	mov	r0, r3
 8003782:	4621      	mov	r1, r4
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f04f 0400 	mov.w	r4, #0
 800378a:	461a      	mov	r2, r3
 800378c:	4623      	mov	r3, r4
 800378e:	f7fc fd39 	bl	8000204 <__aeabi_uldivmod>
 8003792:	4603      	mov	r3, r0
 8003794:	460c      	mov	r4, r1
 8003796:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003798:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x298>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	0f1b      	lsrs	r3, r3, #28
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ac:	613b      	str	r3, [r7, #16]
      break;
 80037ae:	e002      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x29c>)
 80037b2:	613b      	str	r3, [r7, #16]
      break;
 80037b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037b6:	693b      	ldr	r3, [r7, #16]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	371c      	adds	r7, #28
 80037bc:	46bd      	mov	sp, r7
 80037be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037c0:	40023800 	.word	0x40023800
 80037c4:	00f42400 	.word	0x00f42400
 80037c8:	017d7840 	.word	0x017d7840

080037cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 8083 	beq.w	80038ec <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80037e6:	4b95      	ldr	r3, [pc, #596]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d019      	beq.n	8003826 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80037f2:	4b92      	ldr	r3, [pc, #584]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d106      	bne.n	800380c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80037fe:	4b8f      	ldr	r3, [pc, #572]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003806:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800380a:	d00c      	beq.n	8003826 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800380c:	4b8b      	ldr	r3, [pc, #556]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003814:	2b0c      	cmp	r3, #12
 8003816:	d112      	bne.n	800383e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003818:	4b88      	ldr	r3, [pc, #544]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003820:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003824:	d10b      	bne.n	800383e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003826:	4b85      	ldr	r3, [pc, #532]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d05b      	beq.n	80038ea <HAL_RCC_OscConfig+0x11e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d157      	bne.n	80038ea <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e216      	b.n	8003c6c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003846:	d106      	bne.n	8003856 <HAL_RCC_OscConfig+0x8a>
 8003848:	4b7c      	ldr	r3, [pc, #496]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a7b      	ldr	r2, [pc, #492]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 800384e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	e01d      	b.n	8003892 <HAL_RCC_OscConfig+0xc6>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800385e:	d10c      	bne.n	800387a <HAL_RCC_OscConfig+0xae>
 8003860:	4b76      	ldr	r3, [pc, #472]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a75      	ldr	r2, [pc, #468]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 8003866:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	4b73      	ldr	r3, [pc, #460]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a72      	ldr	r2, [pc, #456]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 8003872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	e00b      	b.n	8003892 <HAL_RCC_OscConfig+0xc6>
 800387a:	4b70      	ldr	r3, [pc, #448]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a6f      	ldr	r2, [pc, #444]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 8003880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	4b6d      	ldr	r3, [pc, #436]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a6c      	ldr	r2, [pc, #432]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 800388c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003890:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d013      	beq.n	80038c2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389a:	f7fe f82f 	bl	80018fc <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038a2:	f7fe f82b 	bl	80018fc <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b64      	cmp	r3, #100	; 0x64
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e1db      	b.n	8003c6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b4:	4b61      	ldr	r3, [pc, #388]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0f0      	beq.n	80038a2 <HAL_RCC_OscConfig+0xd6>
 80038c0:	e014      	b.n	80038ec <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c2:	f7fe f81b 	bl	80018fc <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c8:	e008      	b.n	80038dc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038ca:	f7fe f817 	bl	80018fc <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b64      	cmp	r3, #100	; 0x64
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e1c7      	b.n	8003c6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038dc:	4b57      	ldr	r3, [pc, #348]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1f0      	bne.n	80038ca <HAL_RCC_OscConfig+0xfe>
 80038e8:	e000      	b.n	80038ec <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d06f      	beq.n	80039d8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80038f8:	4b50      	ldr	r3, [pc, #320]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 030c 	and.w	r3, r3, #12
 8003900:	2b00      	cmp	r3, #0
 8003902:	d017      	beq.n	8003934 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003904:	4b4d      	ldr	r3, [pc, #308]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800390c:	2b08      	cmp	r3, #8
 800390e:	d105      	bne.n	800391c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003910:	4b4a      	ldr	r3, [pc, #296]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00b      	beq.n	8003934 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800391c:	4b47      	ldr	r3, [pc, #284]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003924:	2b0c      	cmp	r3, #12
 8003926:	d11c      	bne.n	8003962 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003928:	4b44      	ldr	r3, [pc, #272]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d116      	bne.n	8003962 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003934:	4b41      	ldr	r3, [pc, #260]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_RCC_OscConfig+0x180>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d001      	beq.n	800394c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e18f      	b.n	8003c6c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800394c:	4b3b      	ldr	r3, [pc, #236]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	4938      	ldr	r1, [pc, #224]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 800395c:	4313      	orrs	r3, r2
 800395e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003960:	e03a      	b.n	80039d8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d020      	beq.n	80039ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800396a:	4b35      	ldr	r3, [pc, #212]	; (8003a40 <HAL_RCC_OscConfig+0x274>)
 800396c:	2201      	movs	r2, #1
 800396e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7fd ffc4 	bl	80018fc <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003978:	f7fd ffc0 	bl	80018fc <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e170      	b.n	8003c6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398a:	4b2c      	ldr	r3, [pc, #176]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003996:	4b29      	ldr	r3, [pc, #164]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4925      	ldr	r1, [pc, #148]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]
 80039aa:	e015      	b.n	80039d8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ac:	4b24      	ldr	r3, [pc, #144]	; (8003a40 <HAL_RCC_OscConfig+0x274>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b2:	f7fd ffa3 	bl	80018fc <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039ba:	f7fd ff9f 	bl	80018fc <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e14f      	b.n	8003c6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039cc:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1f0      	bne.n	80039ba <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d037      	beq.n	8003a54 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d016      	beq.n	8003a1a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ec:	4b15      	ldr	r3, [pc, #84]	; (8003a44 <HAL_RCC_OscConfig+0x278>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f2:	f7fd ff83 	bl	80018fc <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039fa:	f7fd ff7f 	bl	80018fc <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e12f      	b.n	8003c6c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 8003a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f0      	beq.n	80039fa <HAL_RCC_OscConfig+0x22e>
 8003a18:	e01c      	b.n	8003a54 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <HAL_RCC_OscConfig+0x278>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a20:	f7fd ff6c 	bl	80018fc <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a26:	e00f      	b.n	8003a48 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a28:	f7fd ff68 	bl	80018fc <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d908      	bls.n	8003a48 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e118      	b.n	8003c6c <HAL_RCC_OscConfig+0x4a0>
 8003a3a:	bf00      	nop
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	42470000 	.word	0x42470000
 8003a44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a48:	4b8a      	ldr	r3, [pc, #552]	; (8003c74 <HAL_RCC_OscConfig+0x4a8>)
 8003a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1e9      	bne.n	8003a28 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 8097 	beq.w	8003b90 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a62:	2300      	movs	r3, #0
 8003a64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a66:	4b83      	ldr	r3, [pc, #524]	; (8003c74 <HAL_RCC_OscConfig+0x4a8>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10f      	bne.n	8003a92 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	4b7f      	ldr	r3, [pc, #508]	; (8003c74 <HAL_RCC_OscConfig+0x4a8>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	4a7e      	ldr	r2, [pc, #504]	; (8003c74 <HAL_RCC_OscConfig+0x4a8>)
 8003a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a80:	6413      	str	r3, [r2, #64]	; 0x40
 8003a82:	4b7c      	ldr	r3, [pc, #496]	; (8003c74 <HAL_RCC_OscConfig+0x4a8>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a92:	4b79      	ldr	r3, [pc, #484]	; (8003c78 <HAL_RCC_OscConfig+0x4ac>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d118      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a9e:	4b76      	ldr	r3, [pc, #472]	; (8003c78 <HAL_RCC_OscConfig+0x4ac>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a75      	ldr	r2, [pc, #468]	; (8003c78 <HAL_RCC_OscConfig+0x4ac>)
 8003aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aaa:	f7fd ff27 	bl	80018fc <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab2:	f7fd ff23 	bl	80018fc <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e0d3      	b.n	8003c6c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac4:	4b6c      	ldr	r3, [pc, #432]	; (8003c78 <HAL_RCC_OscConfig+0x4ac>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f0      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d106      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x31a>
 8003ad8:	4b66      	ldr	r3, [pc, #408]	; (8003c74 <HAL_RCC_OscConfig+0x4a8>)
 8003ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003adc:	4a65      	ldr	r2, [pc, #404]	; (8003c74 <HAL_RCC_OscConfig+0x4a8>)
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae4:	e01c      	b.n	8003b20 <HAL_RCC_OscConfig+0x354>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b05      	cmp	r3, #5
 8003aec:	d10c      	bne.n	8003b08 <HAL_RCC_OscConfig+0x33c>
 8003aee:	4b61      	ldr	r3, [pc, #388]	; (8003c74 <HAL_RCC_OscConfig+0x4a8>)
 8003af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af2:	4a60      	ldr	r2, [pc, #384]	; (8003c74 <HAL_RCC_OscConfig+0x4a8>)
 8003af4:	f043 0304 	orr.w	r3, r3, #4
 8003af8:	6713      	str	r3, [r2, #112]	; 0x70
 8003afa:	4b5e      	ldr	r3, [pc, #376]	; (8003c74 <HAL_RCC_OscConfig+0x4a8>)
 8003afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afe:	4a5d      	ldr	r2, [pc, #372]	; (8003c74 <HAL_RCC_OscConfig+0x4a8>)
 8003b00:	f043 0301 	orr.w	r3, r3, #1
 8003b04:	6713      	str	r3, [r2, #112]	; 0x70
 8003b06:	e00b      	b.n	8003b20 <HAL_RCC_OscConfig+0x354>
 8003b08:	4b5a      	ldr	r3, [pc, #360]	; (8003c74 <HAL_RCC_OscConfig+0x4a8>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0c:	4a59      	ldr	r2, [pc, #356]	; (8003c74 <HAL_RCC_OscConfig+0x4a8>)
 8003b0e:	f023 0301 	bic.w	r3, r3, #1
 8003b12:	6713      	str	r3, [r2, #112]	; 0x70
 8003b14:	4b57      	ldr	r3, [pc, #348]	; (8003c74 <HAL_RCC_OscConfig+0x4a8>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b18:	4a56      	ldr	r2, [pc, #344]	; (8003c74 <HAL_RCC_OscConfig+0x4a8>)
 8003b1a:	f023 0304 	bic.w	r3, r3, #4
 8003b1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d015      	beq.n	8003b54 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b28:	f7fd fee8 	bl	80018fc <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b2e:	e00a      	b.n	8003b46 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b30:	f7fd fee4 	bl	80018fc <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e092      	b.n	8003c6c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b46:	4b4b      	ldr	r3, [pc, #300]	; (8003c74 <HAL_RCC_OscConfig+0x4a8>)
 8003b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0ee      	beq.n	8003b30 <HAL_RCC_OscConfig+0x364>
 8003b52:	e014      	b.n	8003b7e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b54:	f7fd fed2 	bl	80018fc <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b5a:	e00a      	b.n	8003b72 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b5c:	f7fd fece 	bl	80018fc <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e07c      	b.n	8003c6c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b72:	4b40      	ldr	r3, [pc, #256]	; (8003c74 <HAL_RCC_OscConfig+0x4a8>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1ee      	bne.n	8003b5c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b7e:	7dfb      	ldrb	r3, [r7, #23]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d105      	bne.n	8003b90 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b84:	4b3b      	ldr	r3, [pc, #236]	; (8003c74 <HAL_RCC_OscConfig+0x4a8>)
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	4a3a      	ldr	r2, [pc, #232]	; (8003c74 <HAL_RCC_OscConfig+0x4a8>)
 8003b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d068      	beq.n	8003c6a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b98:	4b36      	ldr	r3, [pc, #216]	; (8003c74 <HAL_RCC_OscConfig+0x4a8>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 030c 	and.w	r3, r3, #12
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d060      	beq.n	8003c66 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d145      	bne.n	8003c38 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bac:	4b33      	ldr	r3, [pc, #204]	; (8003c7c <HAL_RCC_OscConfig+0x4b0>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb2:	f7fd fea3 	bl	80018fc <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bba:	f7fd fe9f 	bl	80018fc <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e04f      	b.n	8003c6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bcc:	4b29      	ldr	r3, [pc, #164]	; (8003c74 <HAL_RCC_OscConfig+0x4a8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f0      	bne.n	8003bba <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	69da      	ldr	r2, [r3, #28]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	019b      	lsls	r3, r3, #6
 8003be8:	431a      	orrs	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bee:	085b      	lsrs	r3, r3, #1
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	041b      	lsls	r3, r3, #16
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfa:	061b      	lsls	r3, r3, #24
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	071b      	lsls	r3, r3, #28
 8003c04:	491b      	ldr	r1, [pc, #108]	; (8003c74 <HAL_RCC_OscConfig+0x4a8>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c0a:	4b1c      	ldr	r3, [pc, #112]	; (8003c7c <HAL_RCC_OscConfig+0x4b0>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fd fe74 	bl	80018fc <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c18:	f7fd fe70 	bl	80018fc <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e020      	b.n	8003c6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2a:	4b12      	ldr	r3, [pc, #72]	; (8003c74 <HAL_RCC_OscConfig+0x4a8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x44c>
 8003c36:	e018      	b.n	8003c6a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c38:	4b10      	ldr	r3, [pc, #64]	; (8003c7c <HAL_RCC_OscConfig+0x4b0>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3e:	f7fd fe5d 	bl	80018fc <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c46:	f7fd fe59 	bl	80018fc <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e009      	b.n	8003c6c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c58:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <HAL_RCC_OscConfig+0x4a8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1f0      	bne.n	8003c46 <HAL_RCC_OscConfig+0x47a>
 8003c64:	e001      	b.n	8003c6a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40023800 	.word	0x40023800
 8003c78:	40007000 	.word	0x40007000
 8003c7c:	42470060 	.word	0x42470060

08003c80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e056      	b.n	8003d40 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d106      	bne.n	8003cb2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7fd fbab 	bl	8001408 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cc8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	ea42 0103 	orr.w	r1, r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	0c1b      	lsrs	r3, r3, #16
 8003d10:	f003 0104 	and.w	r1, r3, #4
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69da      	ldr	r2, [r3, #28]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e01d      	b.n	8003d96 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fd fbc2 	bl	80014f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3304      	adds	r3, #4
 8003d84:	4619      	mov	r1, r3
 8003d86:	4610      	mov	r0, r2
 8003d88:	f000 fa4a 	bl	8004220 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b085      	sub	sp, #20
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f042 0201 	orr.w	r2, r2, #1
 8003db4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b06      	cmp	r3, #6
 8003dc6:	d007      	beq.n	8003dd8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0201 	bic.w	r2, r2, #1
 8003dfc:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6a1a      	ldr	r2, [r3, #32]
 8003e04:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e08:	4013      	ands	r3, r2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10f      	bne.n	8003e2e <HAL_TIM_Base_Stop_IT+0x48>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6a1a      	ldr	r2, [r3, #32]
 8003e14:	f240 4344 	movw	r3, #1092	; 0x444
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d107      	bne.n	8003e2e <HAL_TIM_Base_Stop_IT+0x48>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0201 	bic.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d122      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d11b      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f06f 0202 	mvn.w	r2, #2
 8003e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f9af 	bl	80041e2 <HAL_TIM_IC_CaptureCallback>
 8003e84:	e005      	b.n	8003e92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f9a1 	bl	80041ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f9b2 	bl	80041f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f003 0304 	and.w	r3, r3, #4
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d122      	bne.n	8003eec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d11b      	bne.n	8003eec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0204 	mvn.w	r2, #4
 8003ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f985 	bl	80041e2 <HAL_TIM_IC_CaptureCallback>
 8003ed8:	e005      	b.n	8003ee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f977 	bl	80041ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f988 	bl	80041f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d122      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d11b      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f06f 0208 	mvn.w	r2, #8
 8003f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2204      	movs	r2, #4
 8003f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f95b 	bl	80041e2 <HAL_TIM_IC_CaptureCallback>
 8003f2c:	e005      	b.n	8003f3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f94d 	bl	80041ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f95e 	bl	80041f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	2b10      	cmp	r3, #16
 8003f4c:	d122      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f003 0310 	and.w	r3, r3, #16
 8003f58:	2b10      	cmp	r3, #16
 8003f5a:	d11b      	bne.n	8003f94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0210 	mvn.w	r2, #16
 8003f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2208      	movs	r2, #8
 8003f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f931 	bl	80041e2 <HAL_TIM_IC_CaptureCallback>
 8003f80:	e005      	b.n	8003f8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f923 	bl	80041ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f934 	bl	80041f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d10e      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d107      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0201 	mvn.w	r2, #1
 8003fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f8fd 	bl	80041ba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fca:	2b80      	cmp	r3, #128	; 0x80
 8003fcc:	d10e      	bne.n	8003fec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd8:	2b80      	cmp	r3, #128	; 0x80
 8003fda:	d107      	bne.n	8003fec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 fada 	bl	80045a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff6:	2b40      	cmp	r3, #64	; 0x40
 8003ff8:	d10e      	bne.n	8004018 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004004:	2b40      	cmp	r3, #64	; 0x40
 8004006:	d107      	bne.n	8004018 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f8f9 	bl	800420a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	2b20      	cmp	r3, #32
 8004024:	d10e      	bne.n	8004044 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f003 0320 	and.w	r3, r3, #32
 8004030:	2b20      	cmp	r3, #32
 8004032:	d107      	bne.n	8004044 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f06f 0220 	mvn.w	r2, #32
 800403c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 faa4 	bl	800458c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004044:	bf00      	nop
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_TIM_ConfigClockSource+0x18>
 8004060:	2302      	movs	r3, #2
 8004062:	e0a6      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x166>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004082:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800408a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b40      	cmp	r3, #64	; 0x40
 800409a:	d067      	beq.n	800416c <HAL_TIM_ConfigClockSource+0x120>
 800409c:	2b40      	cmp	r3, #64	; 0x40
 800409e:	d80b      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x6c>
 80040a0:	2b10      	cmp	r3, #16
 80040a2:	d073      	beq.n	800418c <HAL_TIM_ConfigClockSource+0x140>
 80040a4:	2b10      	cmp	r3, #16
 80040a6:	d802      	bhi.n	80040ae <HAL_TIM_ConfigClockSource+0x62>
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d06f      	beq.n	800418c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80040ac:	e078      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040ae:	2b20      	cmp	r3, #32
 80040b0:	d06c      	beq.n	800418c <HAL_TIM_ConfigClockSource+0x140>
 80040b2:	2b30      	cmp	r3, #48	; 0x30
 80040b4:	d06a      	beq.n	800418c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80040b6:	e073      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040b8:	2b70      	cmp	r3, #112	; 0x70
 80040ba:	d00d      	beq.n	80040d8 <HAL_TIM_ConfigClockSource+0x8c>
 80040bc:	2b70      	cmp	r3, #112	; 0x70
 80040be:	d804      	bhi.n	80040ca <HAL_TIM_ConfigClockSource+0x7e>
 80040c0:	2b50      	cmp	r3, #80	; 0x50
 80040c2:	d033      	beq.n	800412c <HAL_TIM_ConfigClockSource+0xe0>
 80040c4:	2b60      	cmp	r3, #96	; 0x60
 80040c6:	d041      	beq.n	800414c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80040c8:	e06a      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ce:	d066      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x152>
 80040d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040d4:	d017      	beq.n	8004106 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80040d6:	e063      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	6899      	ldr	r1, [r3, #8]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f000 f9b4 	bl	8004454 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	609a      	str	r2, [r3, #8]
      break;
 8004104:	e04c      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	6899      	ldr	r1, [r3, #8]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f000 f99d 	bl	8004454 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004128:	609a      	str	r2, [r3, #8]
      break;
 800412a:	e039      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6818      	ldr	r0, [r3, #0]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	6859      	ldr	r1, [r3, #4]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	461a      	mov	r2, r3
 800413a:	f000 f911 	bl	8004360 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2150      	movs	r1, #80	; 0x50
 8004144:	4618      	mov	r0, r3
 8004146:	f000 f96a 	bl	800441e <TIM_ITRx_SetConfig>
      break;
 800414a:	e029      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	461a      	mov	r2, r3
 800415a:	f000 f930 	bl	80043be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2160      	movs	r1, #96	; 0x60
 8004164:	4618      	mov	r0, r3
 8004166:	f000 f95a 	bl	800441e <TIM_ITRx_SetConfig>
      break;
 800416a:	e019      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	6859      	ldr	r1, [r3, #4]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	461a      	mov	r2, r3
 800417a:	f000 f8f1 	bl	8004360 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2140      	movs	r1, #64	; 0x40
 8004184:	4618      	mov	r0, r3
 8004186:	f000 f94a 	bl	800441e <TIM_ITRx_SetConfig>
      break;
 800418a:	e009      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4619      	mov	r1, r3
 8004196:	4610      	mov	r0, r2
 8004198:	f000 f941 	bl	800441e <TIM_ITRx_SetConfig>
      break;
 800419c:	e000      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800419e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
	...

08004220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a40      	ldr	r2, [pc, #256]	; (8004334 <TIM_Base_SetConfig+0x114>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d013      	beq.n	8004260 <TIM_Base_SetConfig+0x40>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423e:	d00f      	beq.n	8004260 <TIM_Base_SetConfig+0x40>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a3d      	ldr	r2, [pc, #244]	; (8004338 <TIM_Base_SetConfig+0x118>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d00b      	beq.n	8004260 <TIM_Base_SetConfig+0x40>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a3c      	ldr	r2, [pc, #240]	; (800433c <TIM_Base_SetConfig+0x11c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d007      	beq.n	8004260 <TIM_Base_SetConfig+0x40>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a3b      	ldr	r2, [pc, #236]	; (8004340 <TIM_Base_SetConfig+0x120>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d003      	beq.n	8004260 <TIM_Base_SetConfig+0x40>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a3a      	ldr	r2, [pc, #232]	; (8004344 <TIM_Base_SetConfig+0x124>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d108      	bne.n	8004272 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a2f      	ldr	r2, [pc, #188]	; (8004334 <TIM_Base_SetConfig+0x114>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d02b      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004280:	d027      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a2c      	ldr	r2, [pc, #176]	; (8004338 <TIM_Base_SetConfig+0x118>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d023      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a2b      	ldr	r2, [pc, #172]	; (800433c <TIM_Base_SetConfig+0x11c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d01f      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a2a      	ldr	r2, [pc, #168]	; (8004340 <TIM_Base_SetConfig+0x120>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d01b      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a29      	ldr	r2, [pc, #164]	; (8004344 <TIM_Base_SetConfig+0x124>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d017      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a28      	ldr	r2, [pc, #160]	; (8004348 <TIM_Base_SetConfig+0x128>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d013      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a27      	ldr	r2, [pc, #156]	; (800434c <TIM_Base_SetConfig+0x12c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00f      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a26      	ldr	r2, [pc, #152]	; (8004350 <TIM_Base_SetConfig+0x130>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00b      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a25      	ldr	r2, [pc, #148]	; (8004354 <TIM_Base_SetConfig+0x134>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d007      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a24      	ldr	r2, [pc, #144]	; (8004358 <TIM_Base_SetConfig+0x138>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d003      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a23      	ldr	r2, [pc, #140]	; (800435c <TIM_Base_SetConfig+0x13c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d108      	bne.n	80042e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a0a      	ldr	r2, [pc, #40]	; (8004334 <TIM_Base_SetConfig+0x114>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d003      	beq.n	8004318 <TIM_Base_SetConfig+0xf8>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a0c      	ldr	r2, [pc, #48]	; (8004344 <TIM_Base_SetConfig+0x124>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d103      	bne.n	8004320 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	691a      	ldr	r2, [r3, #16]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	615a      	str	r2, [r3, #20]
}
 8004326:	bf00      	nop
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40010000 	.word	0x40010000
 8004338:	40000400 	.word	0x40000400
 800433c:	40000800 	.word	0x40000800
 8004340:	40000c00 	.word	0x40000c00
 8004344:	40010400 	.word	0x40010400
 8004348:	40014000 	.word	0x40014000
 800434c:	40014400 	.word	0x40014400
 8004350:	40014800 	.word	0x40014800
 8004354:	40001800 	.word	0x40001800
 8004358:	40001c00 	.word	0x40001c00
 800435c:	40002000 	.word	0x40002000

08004360 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	f023 0201 	bic.w	r2, r3, #1
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800438a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f023 030a 	bic.w	r3, r3, #10
 800439c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	621a      	str	r2, [r3, #32]
}
 80043b2:	bf00      	nop
 80043b4:	371c      	adds	r7, #28
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043be:	b480      	push	{r7}
 80043c0:	b087      	sub	sp, #28
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0210 	bic.w	r2, r3, #16
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	031b      	lsls	r3, r3, #12
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	4313      	orrs	r3, r2
 8004404:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	621a      	str	r2, [r3, #32]
}
 8004412:	bf00      	nop
 8004414:	371c      	adds	r7, #28
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800441e:	b480      	push	{r7}
 8004420:	b085      	sub	sp, #20
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004434:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	f043 0307 	orr.w	r3, r3, #7
 8004440:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	609a      	str	r2, [r3, #8]
}
 8004448:	bf00      	nop
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
 8004460:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800446e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	021a      	lsls	r2, r3, #8
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	431a      	orrs	r2, r3
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	4313      	orrs	r3, r2
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	609a      	str	r2, [r3, #8]
}
 8004488:	bf00      	nop
 800448a:	371c      	adds	r7, #28
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d101      	bne.n	80044ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044a8:	2302      	movs	r3, #2
 80044aa:	e05a      	b.n	8004562 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	4313      	orrs	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a21      	ldr	r2, [pc, #132]	; (8004570 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d022      	beq.n	8004536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f8:	d01d      	beq.n	8004536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1d      	ldr	r2, [pc, #116]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d018      	beq.n	8004536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a1b      	ldr	r2, [pc, #108]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d013      	beq.n	8004536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a1a      	ldr	r2, [pc, #104]	; (800457c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d00e      	beq.n	8004536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a18      	ldr	r2, [pc, #96]	; (8004580 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d009      	beq.n	8004536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a17      	ldr	r2, [pc, #92]	; (8004584 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d004      	beq.n	8004536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a15      	ldr	r2, [pc, #84]	; (8004588 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d10c      	bne.n	8004550 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800453c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	4313      	orrs	r3, r2
 8004546:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40010000 	.word	0x40010000
 8004574:	40000400 	.word	0x40000400
 8004578:	40000800 	.word	0x40000800
 800457c:	40000c00 	.word	0x40000c00
 8004580:	40010400 	.word	0x40010400
 8004584:	40014000 	.word	0x40014000
 8004588:	40001800 	.word	0x40001800

0800458c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e03f      	b.n	8004646 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fc ffc8 	bl	8001570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2224      	movs	r2, #36	; 0x24
 80045e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f90b 	bl	8004814 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	691a      	ldr	r2, [r3, #16]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800460c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695a      	ldr	r2, [r3, #20]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800461c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800462c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b088      	sub	sp, #32
 8004652:	af02      	add	r7, sp, #8
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	603b      	str	r3, [r7, #0]
 800465a:	4613      	mov	r3, r2
 800465c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800465e:	2300      	movs	r3, #0
 8004660:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b20      	cmp	r3, #32
 800466c:	f040 8083 	bne.w	8004776 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <HAL_UART_Transmit+0x2e>
 8004676:	88fb      	ldrh	r3, [r7, #6]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e07b      	b.n	8004778 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <HAL_UART_Transmit+0x40>
 800468a:	2302      	movs	r3, #2
 800468c:	e074      	b.n	8004778 <HAL_UART_Transmit+0x12a>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2221      	movs	r2, #33	; 0x21
 80046a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046a4:	f7fd f92a 	bl	80018fc <HAL_GetTick>
 80046a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	88fa      	ldrh	r2, [r7, #6]
 80046ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	88fa      	ldrh	r2, [r7, #6]
 80046b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80046be:	e042      	b.n	8004746 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d6:	d122      	bne.n	800471e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2200      	movs	r2, #0
 80046e0:	2180      	movs	r1, #128	; 0x80
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 f84c 	bl	8004780 <UART_WaitOnFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e042      	b.n	8004778 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	461a      	mov	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004704:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d103      	bne.n	8004716 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	3302      	adds	r3, #2
 8004712:	60bb      	str	r3, [r7, #8]
 8004714:	e017      	b.n	8004746 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	3301      	adds	r3, #1
 800471a:	60bb      	str	r3, [r7, #8]
 800471c:	e013      	b.n	8004746 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2200      	movs	r2, #0
 8004726:	2180      	movs	r1, #128	; 0x80
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 f829 	bl	8004780 <UART_WaitOnFlagUntilTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e01f      	b.n	8004778 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	60ba      	str	r2, [r7, #8]
 800473e:	781a      	ldrb	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1b7      	bne.n	80046c0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2200      	movs	r2, #0
 8004758:	2140      	movs	r1, #64	; 0x40
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 f810 	bl	8004780 <UART_WaitOnFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e006      	b.n	8004778 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	e000      	b.n	8004778 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004776:	2302      	movs	r3, #2
  }
}
 8004778:	4618      	mov	r0, r3
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	603b      	str	r3, [r7, #0]
 800478c:	4613      	mov	r3, r2
 800478e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004790:	e02c      	b.n	80047ec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004798:	d028      	beq.n	80047ec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d007      	beq.n	80047b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80047a0:	f7fd f8ac 	bl	80018fc <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d21d      	bcs.n	80047ec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047be:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695a      	ldr	r2, [r3, #20]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0201 	bic.w	r2, r2, #1
 80047ce:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2220      	movs	r2, #32
 80047d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2220      	movs	r2, #32
 80047dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e00f      	b.n	800480c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	4013      	ands	r3, r2
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	bf0c      	ite	eq
 80047fc:	2301      	moveq	r3, #1
 80047fe:	2300      	movne	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	461a      	mov	r2, r3
 8004804:	79fb      	ldrb	r3, [r7, #7]
 8004806:	429a      	cmp	r2, r3
 8004808:	d0c3      	beq.n	8004792 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004818:	b085      	sub	sp, #20
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68da      	ldr	r2, [r3, #12]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	431a      	orrs	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	4313      	orrs	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004856:	f023 030c 	bic.w	r3, r3, #12
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6812      	ldr	r2, [r2, #0]
 800485e:	68f9      	ldr	r1, [r7, #12]
 8004860:	430b      	orrs	r3, r1
 8004862:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699a      	ldr	r2, [r3, #24]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004882:	f040 818b 	bne.w	8004b9c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4ac1      	ldr	r2, [pc, #772]	; (8004b90 <UART_SetConfig+0x37c>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d005      	beq.n	800489c <UART_SetConfig+0x88>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4abf      	ldr	r2, [pc, #764]	; (8004b94 <UART_SetConfig+0x380>)
 8004896:	4293      	cmp	r3, r2
 8004898:	f040 80bd 	bne.w	8004a16 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800489c:	f7fe fe30 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 80048a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	461d      	mov	r5, r3
 80048a6:	f04f 0600 	mov.w	r6, #0
 80048aa:	46a8      	mov	r8, r5
 80048ac:	46b1      	mov	r9, r6
 80048ae:	eb18 0308 	adds.w	r3, r8, r8
 80048b2:	eb49 0409 	adc.w	r4, r9, r9
 80048b6:	4698      	mov	r8, r3
 80048b8:	46a1      	mov	r9, r4
 80048ba:	eb18 0805 	adds.w	r8, r8, r5
 80048be:	eb49 0906 	adc.w	r9, r9, r6
 80048c2:	f04f 0100 	mov.w	r1, #0
 80048c6:	f04f 0200 	mov.w	r2, #0
 80048ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80048ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80048d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80048d6:	4688      	mov	r8, r1
 80048d8:	4691      	mov	r9, r2
 80048da:	eb18 0005 	adds.w	r0, r8, r5
 80048de:	eb49 0106 	adc.w	r1, r9, r6
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	461d      	mov	r5, r3
 80048e8:	f04f 0600 	mov.w	r6, #0
 80048ec:	196b      	adds	r3, r5, r5
 80048ee:	eb46 0406 	adc.w	r4, r6, r6
 80048f2:	461a      	mov	r2, r3
 80048f4:	4623      	mov	r3, r4
 80048f6:	f7fb fc85 	bl	8000204 <__aeabi_uldivmod>
 80048fa:	4603      	mov	r3, r0
 80048fc:	460c      	mov	r4, r1
 80048fe:	461a      	mov	r2, r3
 8004900:	4ba5      	ldr	r3, [pc, #660]	; (8004b98 <UART_SetConfig+0x384>)
 8004902:	fba3 2302 	umull	r2, r3, r3, r2
 8004906:	095b      	lsrs	r3, r3, #5
 8004908:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	461d      	mov	r5, r3
 8004910:	f04f 0600 	mov.w	r6, #0
 8004914:	46a9      	mov	r9, r5
 8004916:	46b2      	mov	sl, r6
 8004918:	eb19 0309 	adds.w	r3, r9, r9
 800491c:	eb4a 040a 	adc.w	r4, sl, sl
 8004920:	4699      	mov	r9, r3
 8004922:	46a2      	mov	sl, r4
 8004924:	eb19 0905 	adds.w	r9, r9, r5
 8004928:	eb4a 0a06 	adc.w	sl, sl, r6
 800492c:	f04f 0100 	mov.w	r1, #0
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004938:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800493c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004940:	4689      	mov	r9, r1
 8004942:	4692      	mov	sl, r2
 8004944:	eb19 0005 	adds.w	r0, r9, r5
 8004948:	eb4a 0106 	adc.w	r1, sl, r6
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	461d      	mov	r5, r3
 8004952:	f04f 0600 	mov.w	r6, #0
 8004956:	196b      	adds	r3, r5, r5
 8004958:	eb46 0406 	adc.w	r4, r6, r6
 800495c:	461a      	mov	r2, r3
 800495e:	4623      	mov	r3, r4
 8004960:	f7fb fc50 	bl	8000204 <__aeabi_uldivmod>
 8004964:	4603      	mov	r3, r0
 8004966:	460c      	mov	r4, r1
 8004968:	461a      	mov	r2, r3
 800496a:	4b8b      	ldr	r3, [pc, #556]	; (8004b98 <UART_SetConfig+0x384>)
 800496c:	fba3 1302 	umull	r1, r3, r3, r2
 8004970:	095b      	lsrs	r3, r3, #5
 8004972:	2164      	movs	r1, #100	; 0x64
 8004974:	fb01 f303 	mul.w	r3, r1, r3
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	3332      	adds	r3, #50	; 0x32
 800497e:	4a86      	ldr	r2, [pc, #536]	; (8004b98 <UART_SetConfig+0x384>)
 8004980:	fba2 2303 	umull	r2, r3, r2, r3
 8004984:	095b      	lsrs	r3, r3, #5
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800498c:	4498      	add	r8, r3
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	461d      	mov	r5, r3
 8004992:	f04f 0600 	mov.w	r6, #0
 8004996:	46a9      	mov	r9, r5
 8004998:	46b2      	mov	sl, r6
 800499a:	eb19 0309 	adds.w	r3, r9, r9
 800499e:	eb4a 040a 	adc.w	r4, sl, sl
 80049a2:	4699      	mov	r9, r3
 80049a4:	46a2      	mov	sl, r4
 80049a6:	eb19 0905 	adds.w	r9, r9, r5
 80049aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80049ae:	f04f 0100 	mov.w	r1, #0
 80049b2:	f04f 0200 	mov.w	r2, #0
 80049b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049c2:	4689      	mov	r9, r1
 80049c4:	4692      	mov	sl, r2
 80049c6:	eb19 0005 	adds.w	r0, r9, r5
 80049ca:	eb4a 0106 	adc.w	r1, sl, r6
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	461d      	mov	r5, r3
 80049d4:	f04f 0600 	mov.w	r6, #0
 80049d8:	196b      	adds	r3, r5, r5
 80049da:	eb46 0406 	adc.w	r4, r6, r6
 80049de:	461a      	mov	r2, r3
 80049e0:	4623      	mov	r3, r4
 80049e2:	f7fb fc0f 	bl	8000204 <__aeabi_uldivmod>
 80049e6:	4603      	mov	r3, r0
 80049e8:	460c      	mov	r4, r1
 80049ea:	461a      	mov	r2, r3
 80049ec:	4b6a      	ldr	r3, [pc, #424]	; (8004b98 <UART_SetConfig+0x384>)
 80049ee:	fba3 1302 	umull	r1, r3, r3, r2
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	2164      	movs	r1, #100	; 0x64
 80049f6:	fb01 f303 	mul.w	r3, r1, r3
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	3332      	adds	r3, #50	; 0x32
 8004a00:	4a65      	ldr	r2, [pc, #404]	; (8004b98 <UART_SetConfig+0x384>)
 8004a02:	fba2 2303 	umull	r2, r3, r2, r3
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	f003 0207 	and.w	r2, r3, #7
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4442      	add	r2, r8
 8004a12:	609a      	str	r2, [r3, #8]
 8004a14:	e26f      	b.n	8004ef6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a16:	f7fe fd5f 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 8004a1a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	461d      	mov	r5, r3
 8004a20:	f04f 0600 	mov.w	r6, #0
 8004a24:	46a8      	mov	r8, r5
 8004a26:	46b1      	mov	r9, r6
 8004a28:	eb18 0308 	adds.w	r3, r8, r8
 8004a2c:	eb49 0409 	adc.w	r4, r9, r9
 8004a30:	4698      	mov	r8, r3
 8004a32:	46a1      	mov	r9, r4
 8004a34:	eb18 0805 	adds.w	r8, r8, r5
 8004a38:	eb49 0906 	adc.w	r9, r9, r6
 8004a3c:	f04f 0100 	mov.w	r1, #0
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a48:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a4c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a50:	4688      	mov	r8, r1
 8004a52:	4691      	mov	r9, r2
 8004a54:	eb18 0005 	adds.w	r0, r8, r5
 8004a58:	eb49 0106 	adc.w	r1, r9, r6
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	461d      	mov	r5, r3
 8004a62:	f04f 0600 	mov.w	r6, #0
 8004a66:	196b      	adds	r3, r5, r5
 8004a68:	eb46 0406 	adc.w	r4, r6, r6
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	4623      	mov	r3, r4
 8004a70:	f7fb fbc8 	bl	8000204 <__aeabi_uldivmod>
 8004a74:	4603      	mov	r3, r0
 8004a76:	460c      	mov	r4, r1
 8004a78:	461a      	mov	r2, r3
 8004a7a:	4b47      	ldr	r3, [pc, #284]	; (8004b98 <UART_SetConfig+0x384>)
 8004a7c:	fba3 2302 	umull	r2, r3, r3, r2
 8004a80:	095b      	lsrs	r3, r3, #5
 8004a82:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	461d      	mov	r5, r3
 8004a8a:	f04f 0600 	mov.w	r6, #0
 8004a8e:	46a9      	mov	r9, r5
 8004a90:	46b2      	mov	sl, r6
 8004a92:	eb19 0309 	adds.w	r3, r9, r9
 8004a96:	eb4a 040a 	adc.w	r4, sl, sl
 8004a9a:	4699      	mov	r9, r3
 8004a9c:	46a2      	mov	sl, r4
 8004a9e:	eb19 0905 	adds.w	r9, r9, r5
 8004aa2:	eb4a 0a06 	adc.w	sl, sl, r6
 8004aa6:	f04f 0100 	mov.w	r1, #0
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ab2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ab6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004aba:	4689      	mov	r9, r1
 8004abc:	4692      	mov	sl, r2
 8004abe:	eb19 0005 	adds.w	r0, r9, r5
 8004ac2:	eb4a 0106 	adc.w	r1, sl, r6
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	461d      	mov	r5, r3
 8004acc:	f04f 0600 	mov.w	r6, #0
 8004ad0:	196b      	adds	r3, r5, r5
 8004ad2:	eb46 0406 	adc.w	r4, r6, r6
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	4623      	mov	r3, r4
 8004ada:	f7fb fb93 	bl	8000204 <__aeabi_uldivmod>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	460c      	mov	r4, r1
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	4b2c      	ldr	r3, [pc, #176]	; (8004b98 <UART_SetConfig+0x384>)
 8004ae6:	fba3 1302 	umull	r1, r3, r3, r2
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	2164      	movs	r1, #100	; 0x64
 8004aee:	fb01 f303 	mul.w	r3, r1, r3
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	3332      	adds	r3, #50	; 0x32
 8004af8:	4a27      	ldr	r2, [pc, #156]	; (8004b98 <UART_SetConfig+0x384>)
 8004afa:	fba2 2303 	umull	r2, r3, r2, r3
 8004afe:	095b      	lsrs	r3, r3, #5
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b06:	4498      	add	r8, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	461d      	mov	r5, r3
 8004b0c:	f04f 0600 	mov.w	r6, #0
 8004b10:	46a9      	mov	r9, r5
 8004b12:	46b2      	mov	sl, r6
 8004b14:	eb19 0309 	adds.w	r3, r9, r9
 8004b18:	eb4a 040a 	adc.w	r4, sl, sl
 8004b1c:	4699      	mov	r9, r3
 8004b1e:	46a2      	mov	sl, r4
 8004b20:	eb19 0905 	adds.w	r9, r9, r5
 8004b24:	eb4a 0a06 	adc.w	sl, sl, r6
 8004b28:	f04f 0100 	mov.w	r1, #0
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b3c:	4689      	mov	r9, r1
 8004b3e:	4692      	mov	sl, r2
 8004b40:	eb19 0005 	adds.w	r0, r9, r5
 8004b44:	eb4a 0106 	adc.w	r1, sl, r6
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	461d      	mov	r5, r3
 8004b4e:	f04f 0600 	mov.w	r6, #0
 8004b52:	196b      	adds	r3, r5, r5
 8004b54:	eb46 0406 	adc.w	r4, r6, r6
 8004b58:	461a      	mov	r2, r3
 8004b5a:	4623      	mov	r3, r4
 8004b5c:	f7fb fb52 	bl	8000204 <__aeabi_uldivmod>
 8004b60:	4603      	mov	r3, r0
 8004b62:	460c      	mov	r4, r1
 8004b64:	461a      	mov	r2, r3
 8004b66:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <UART_SetConfig+0x384>)
 8004b68:	fba3 1302 	umull	r1, r3, r3, r2
 8004b6c:	095b      	lsrs	r3, r3, #5
 8004b6e:	2164      	movs	r1, #100	; 0x64
 8004b70:	fb01 f303 	mul.w	r3, r1, r3
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	3332      	adds	r3, #50	; 0x32
 8004b7a:	4a07      	ldr	r2, [pc, #28]	; (8004b98 <UART_SetConfig+0x384>)
 8004b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b80:	095b      	lsrs	r3, r3, #5
 8004b82:	f003 0207 	and.w	r2, r3, #7
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4442      	add	r2, r8
 8004b8c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004b8e:	e1b2      	b.n	8004ef6 <UART_SetConfig+0x6e2>
 8004b90:	40011000 	.word	0x40011000
 8004b94:	40011400 	.word	0x40011400
 8004b98:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4ad7      	ldr	r2, [pc, #860]	; (8004f00 <UART_SetConfig+0x6ec>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d005      	beq.n	8004bb2 <UART_SetConfig+0x39e>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4ad6      	ldr	r2, [pc, #856]	; (8004f04 <UART_SetConfig+0x6f0>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	f040 80d1 	bne.w	8004d54 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bb2:	f7fe fca5 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 8004bb6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	469a      	mov	sl, r3
 8004bbc:	f04f 0b00 	mov.w	fp, #0
 8004bc0:	46d0      	mov	r8, sl
 8004bc2:	46d9      	mov	r9, fp
 8004bc4:	eb18 0308 	adds.w	r3, r8, r8
 8004bc8:	eb49 0409 	adc.w	r4, r9, r9
 8004bcc:	4698      	mov	r8, r3
 8004bce:	46a1      	mov	r9, r4
 8004bd0:	eb18 080a 	adds.w	r8, r8, sl
 8004bd4:	eb49 090b 	adc.w	r9, r9, fp
 8004bd8:	f04f 0100 	mov.w	r1, #0
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004be4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004be8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004bec:	4688      	mov	r8, r1
 8004bee:	4691      	mov	r9, r2
 8004bf0:	eb1a 0508 	adds.w	r5, sl, r8
 8004bf4:	eb4b 0609 	adc.w	r6, fp, r9
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	f04f 0400 	mov.w	r4, #0
 8004c0a:	0094      	lsls	r4, r2, #2
 8004c0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c10:	008b      	lsls	r3, r1, #2
 8004c12:	461a      	mov	r2, r3
 8004c14:	4623      	mov	r3, r4
 8004c16:	4628      	mov	r0, r5
 8004c18:	4631      	mov	r1, r6
 8004c1a:	f7fb faf3 	bl	8000204 <__aeabi_uldivmod>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	460c      	mov	r4, r1
 8004c22:	461a      	mov	r2, r3
 8004c24:	4bb8      	ldr	r3, [pc, #736]	; (8004f08 <UART_SetConfig+0x6f4>)
 8004c26:	fba3 2302 	umull	r2, r3, r3, r2
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	469b      	mov	fp, r3
 8004c34:	f04f 0c00 	mov.w	ip, #0
 8004c38:	46d9      	mov	r9, fp
 8004c3a:	46e2      	mov	sl, ip
 8004c3c:	eb19 0309 	adds.w	r3, r9, r9
 8004c40:	eb4a 040a 	adc.w	r4, sl, sl
 8004c44:	4699      	mov	r9, r3
 8004c46:	46a2      	mov	sl, r4
 8004c48:	eb19 090b 	adds.w	r9, r9, fp
 8004c4c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c50:	f04f 0100 	mov.w	r1, #0
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c64:	4689      	mov	r9, r1
 8004c66:	4692      	mov	sl, r2
 8004c68:	eb1b 0509 	adds.w	r5, fp, r9
 8004c6c:	eb4c 060a 	adc.w	r6, ip, sl
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	4619      	mov	r1, r3
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	f04f 0400 	mov.w	r4, #0
 8004c82:	0094      	lsls	r4, r2, #2
 8004c84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c88:	008b      	lsls	r3, r1, #2
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	4623      	mov	r3, r4
 8004c8e:	4628      	mov	r0, r5
 8004c90:	4631      	mov	r1, r6
 8004c92:	f7fb fab7 	bl	8000204 <__aeabi_uldivmod>
 8004c96:	4603      	mov	r3, r0
 8004c98:	460c      	mov	r4, r1
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	4b9a      	ldr	r3, [pc, #616]	; (8004f08 <UART_SetConfig+0x6f4>)
 8004c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	2164      	movs	r1, #100	; 0x64
 8004ca6:	fb01 f303 	mul.w	r3, r1, r3
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	3332      	adds	r3, #50	; 0x32
 8004cb0:	4a95      	ldr	r2, [pc, #596]	; (8004f08 <UART_SetConfig+0x6f4>)
 8004cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb6:	095b      	lsrs	r3, r3, #5
 8004cb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cbc:	4498      	add	r8, r3
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	469b      	mov	fp, r3
 8004cc2:	f04f 0c00 	mov.w	ip, #0
 8004cc6:	46d9      	mov	r9, fp
 8004cc8:	46e2      	mov	sl, ip
 8004cca:	eb19 0309 	adds.w	r3, r9, r9
 8004cce:	eb4a 040a 	adc.w	r4, sl, sl
 8004cd2:	4699      	mov	r9, r3
 8004cd4:	46a2      	mov	sl, r4
 8004cd6:	eb19 090b 	adds.w	r9, r9, fp
 8004cda:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004cde:	f04f 0100 	mov.w	r1, #0
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cf2:	4689      	mov	r9, r1
 8004cf4:	4692      	mov	sl, r2
 8004cf6:	eb1b 0509 	adds.w	r5, fp, r9
 8004cfa:	eb4c 060a 	adc.w	r6, ip, sl
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	4619      	mov	r1, r3
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	f04f 0400 	mov.w	r4, #0
 8004d10:	0094      	lsls	r4, r2, #2
 8004d12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d16:	008b      	lsls	r3, r1, #2
 8004d18:	461a      	mov	r2, r3
 8004d1a:	4623      	mov	r3, r4
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	4631      	mov	r1, r6
 8004d20:	f7fb fa70 	bl	8000204 <__aeabi_uldivmod>
 8004d24:	4603      	mov	r3, r0
 8004d26:	460c      	mov	r4, r1
 8004d28:	461a      	mov	r2, r3
 8004d2a:	4b77      	ldr	r3, [pc, #476]	; (8004f08 <UART_SetConfig+0x6f4>)
 8004d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d30:	095b      	lsrs	r3, r3, #5
 8004d32:	2164      	movs	r1, #100	; 0x64
 8004d34:	fb01 f303 	mul.w	r3, r1, r3
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	3332      	adds	r3, #50	; 0x32
 8004d3e:	4a72      	ldr	r2, [pc, #456]	; (8004f08 <UART_SetConfig+0x6f4>)
 8004d40:	fba2 2303 	umull	r2, r3, r2, r3
 8004d44:	095b      	lsrs	r3, r3, #5
 8004d46:	f003 020f 	and.w	r2, r3, #15
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4442      	add	r2, r8
 8004d50:	609a      	str	r2, [r3, #8]
 8004d52:	e0d0      	b.n	8004ef6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d54:	f7fe fbc0 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 8004d58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	469a      	mov	sl, r3
 8004d5e:	f04f 0b00 	mov.w	fp, #0
 8004d62:	46d0      	mov	r8, sl
 8004d64:	46d9      	mov	r9, fp
 8004d66:	eb18 0308 	adds.w	r3, r8, r8
 8004d6a:	eb49 0409 	adc.w	r4, r9, r9
 8004d6e:	4698      	mov	r8, r3
 8004d70:	46a1      	mov	r9, r4
 8004d72:	eb18 080a 	adds.w	r8, r8, sl
 8004d76:	eb49 090b 	adc.w	r9, r9, fp
 8004d7a:	f04f 0100 	mov.w	r1, #0
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d8e:	4688      	mov	r8, r1
 8004d90:	4691      	mov	r9, r2
 8004d92:	eb1a 0508 	adds.w	r5, sl, r8
 8004d96:	eb4b 0609 	adc.w	r6, fp, r9
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	4619      	mov	r1, r3
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	f04f 0400 	mov.w	r4, #0
 8004dac:	0094      	lsls	r4, r2, #2
 8004dae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004db2:	008b      	lsls	r3, r1, #2
 8004db4:	461a      	mov	r2, r3
 8004db6:	4623      	mov	r3, r4
 8004db8:	4628      	mov	r0, r5
 8004dba:	4631      	mov	r1, r6
 8004dbc:	f7fb fa22 	bl	8000204 <__aeabi_uldivmod>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	460c      	mov	r4, r1
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	4b50      	ldr	r3, [pc, #320]	; (8004f08 <UART_SetConfig+0x6f4>)
 8004dc8:	fba3 2302 	umull	r2, r3, r3, r2
 8004dcc:	095b      	lsrs	r3, r3, #5
 8004dce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	469b      	mov	fp, r3
 8004dd6:	f04f 0c00 	mov.w	ip, #0
 8004dda:	46d9      	mov	r9, fp
 8004ddc:	46e2      	mov	sl, ip
 8004dde:	eb19 0309 	adds.w	r3, r9, r9
 8004de2:	eb4a 040a 	adc.w	r4, sl, sl
 8004de6:	4699      	mov	r9, r3
 8004de8:	46a2      	mov	sl, r4
 8004dea:	eb19 090b 	adds.w	r9, r9, fp
 8004dee:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004df2:	f04f 0100 	mov.w	r1, #0
 8004df6:	f04f 0200 	mov.w	r2, #0
 8004dfa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dfe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e06:	4689      	mov	r9, r1
 8004e08:	4692      	mov	sl, r2
 8004e0a:	eb1b 0509 	adds.w	r5, fp, r9
 8004e0e:	eb4c 060a 	adc.w	r6, ip, sl
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	4619      	mov	r1, r3
 8004e18:	f04f 0200 	mov.w	r2, #0
 8004e1c:	f04f 0300 	mov.w	r3, #0
 8004e20:	f04f 0400 	mov.w	r4, #0
 8004e24:	0094      	lsls	r4, r2, #2
 8004e26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e2a:	008b      	lsls	r3, r1, #2
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	4623      	mov	r3, r4
 8004e30:	4628      	mov	r0, r5
 8004e32:	4631      	mov	r1, r6
 8004e34:	f7fb f9e6 	bl	8000204 <__aeabi_uldivmod>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	4b32      	ldr	r3, [pc, #200]	; (8004f08 <UART_SetConfig+0x6f4>)
 8004e40:	fba3 1302 	umull	r1, r3, r3, r2
 8004e44:	095b      	lsrs	r3, r3, #5
 8004e46:	2164      	movs	r1, #100	; 0x64
 8004e48:	fb01 f303 	mul.w	r3, r1, r3
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	011b      	lsls	r3, r3, #4
 8004e50:	3332      	adds	r3, #50	; 0x32
 8004e52:	4a2d      	ldr	r2, [pc, #180]	; (8004f08 <UART_SetConfig+0x6f4>)
 8004e54:	fba2 2303 	umull	r2, r3, r2, r3
 8004e58:	095b      	lsrs	r3, r3, #5
 8004e5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e5e:	4498      	add	r8, r3
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	469b      	mov	fp, r3
 8004e64:	f04f 0c00 	mov.w	ip, #0
 8004e68:	46d9      	mov	r9, fp
 8004e6a:	46e2      	mov	sl, ip
 8004e6c:	eb19 0309 	adds.w	r3, r9, r9
 8004e70:	eb4a 040a 	adc.w	r4, sl, sl
 8004e74:	4699      	mov	r9, r3
 8004e76:	46a2      	mov	sl, r4
 8004e78:	eb19 090b 	adds.w	r9, r9, fp
 8004e7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004e80:	f04f 0100 	mov.w	r1, #0
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e94:	4689      	mov	r9, r1
 8004e96:	4692      	mov	sl, r2
 8004e98:	eb1b 0509 	adds.w	r5, fp, r9
 8004e9c:	eb4c 060a 	adc.w	r6, ip, sl
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	f04f 0200 	mov.w	r2, #0
 8004eaa:	f04f 0300 	mov.w	r3, #0
 8004eae:	f04f 0400 	mov.w	r4, #0
 8004eb2:	0094      	lsls	r4, r2, #2
 8004eb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004eb8:	008b      	lsls	r3, r1, #2
 8004eba:	461a      	mov	r2, r3
 8004ebc:	4623      	mov	r3, r4
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	4631      	mov	r1, r6
 8004ec2:	f7fb f99f 	bl	8000204 <__aeabi_uldivmod>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	460c      	mov	r4, r1
 8004eca:	461a      	mov	r2, r3
 8004ecc:	4b0e      	ldr	r3, [pc, #56]	; (8004f08 <UART_SetConfig+0x6f4>)
 8004ece:	fba3 1302 	umull	r1, r3, r3, r2
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	2164      	movs	r1, #100	; 0x64
 8004ed6:	fb01 f303 	mul.w	r3, r1, r3
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	3332      	adds	r3, #50	; 0x32
 8004ee0:	4a09      	ldr	r2, [pc, #36]	; (8004f08 <UART_SetConfig+0x6f4>)
 8004ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee6:	095b      	lsrs	r3, r3, #5
 8004ee8:	f003 020f 	and.w	r2, r3, #15
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4442      	add	r2, r8
 8004ef2:	609a      	str	r2, [r3, #8]
}
 8004ef4:	e7ff      	b.n	8004ef6 <UART_SetConfig+0x6e2>
 8004ef6:	bf00      	nop
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f00:	40011000 	.word	0x40011000
 8004f04:	40011400 	.word	0x40011400
 8004f08:	51eb851f 	.word	0x51eb851f

08004f0c <__libc_init_array>:
 8004f0c:	b570      	push	{r4, r5, r6, lr}
 8004f0e:	4e0d      	ldr	r6, [pc, #52]	; (8004f44 <__libc_init_array+0x38>)
 8004f10:	4c0d      	ldr	r4, [pc, #52]	; (8004f48 <__libc_init_array+0x3c>)
 8004f12:	1ba4      	subs	r4, r4, r6
 8004f14:	10a4      	asrs	r4, r4, #2
 8004f16:	2500      	movs	r5, #0
 8004f18:	42a5      	cmp	r5, r4
 8004f1a:	d109      	bne.n	8004f30 <__libc_init_array+0x24>
 8004f1c:	4e0b      	ldr	r6, [pc, #44]	; (8004f4c <__libc_init_array+0x40>)
 8004f1e:	4c0c      	ldr	r4, [pc, #48]	; (8004f50 <__libc_init_array+0x44>)
 8004f20:	f000 fd6c 	bl	80059fc <_init>
 8004f24:	1ba4      	subs	r4, r4, r6
 8004f26:	10a4      	asrs	r4, r4, #2
 8004f28:	2500      	movs	r5, #0
 8004f2a:	42a5      	cmp	r5, r4
 8004f2c:	d105      	bne.n	8004f3a <__libc_init_array+0x2e>
 8004f2e:	bd70      	pop	{r4, r5, r6, pc}
 8004f30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f34:	4798      	blx	r3
 8004f36:	3501      	adds	r5, #1
 8004f38:	e7ee      	b.n	8004f18 <__libc_init_array+0xc>
 8004f3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f3e:	4798      	blx	r3
 8004f40:	3501      	adds	r5, #1
 8004f42:	e7f2      	b.n	8004f2a <__libc_init_array+0x1e>
 8004f44:	08005e0c 	.word	0x08005e0c
 8004f48:	08005e0c 	.word	0x08005e0c
 8004f4c:	08005e0c 	.word	0x08005e0c
 8004f50:	08005e10 	.word	0x08005e10

08004f54 <memset>:
 8004f54:	4402      	add	r2, r0
 8004f56:	4603      	mov	r3, r0
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d100      	bne.n	8004f5e <memset+0xa>
 8004f5c:	4770      	bx	lr
 8004f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f62:	e7f9      	b.n	8004f58 <memset+0x4>

08004f64 <sinf>:
 8004f64:	ee10 3a10 	vmov	r3, s0
 8004f68:	b507      	push	{r0, r1, r2, lr}
 8004f6a:	4a1d      	ldr	r2, [pc, #116]	; (8004fe0 <sinf+0x7c>)
 8004f6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f70:	4293      	cmp	r3, r2
 8004f72:	dc05      	bgt.n	8004f80 <sinf+0x1c>
 8004f74:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8004fe4 <sinf+0x80>
 8004f78:	2000      	movs	r0, #0
 8004f7a:	f000 fc41 	bl	8005800 <__kernel_sinf>
 8004f7e:	e004      	b.n	8004f8a <sinf+0x26>
 8004f80:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004f84:	db04      	blt.n	8004f90 <sinf+0x2c>
 8004f86:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004f8a:	b003      	add	sp, #12
 8004f8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f90:	4668      	mov	r0, sp
 8004f92:	f000 f829 	bl	8004fe8 <__ieee754_rem_pio2f>
 8004f96:	f000 0003 	and.w	r0, r0, #3
 8004f9a:	2801      	cmp	r0, #1
 8004f9c:	d008      	beq.n	8004fb0 <sinf+0x4c>
 8004f9e:	2802      	cmp	r0, #2
 8004fa0:	d00d      	beq.n	8004fbe <sinf+0x5a>
 8004fa2:	b9b0      	cbnz	r0, 8004fd2 <sinf+0x6e>
 8004fa4:	2001      	movs	r0, #1
 8004fa6:	eddd 0a01 	vldr	s1, [sp, #4]
 8004faa:	ed9d 0a00 	vldr	s0, [sp]
 8004fae:	e7e4      	b.n	8004f7a <sinf+0x16>
 8004fb0:	eddd 0a01 	vldr	s1, [sp, #4]
 8004fb4:	ed9d 0a00 	vldr	s0, [sp]
 8004fb8:	f000 f942 	bl	8005240 <__kernel_cosf>
 8004fbc:	e7e5      	b.n	8004f8a <sinf+0x26>
 8004fbe:	2001      	movs	r0, #1
 8004fc0:	eddd 0a01 	vldr	s1, [sp, #4]
 8004fc4:	ed9d 0a00 	vldr	s0, [sp]
 8004fc8:	f000 fc1a 	bl	8005800 <__kernel_sinf>
 8004fcc:	eeb1 0a40 	vneg.f32	s0, s0
 8004fd0:	e7db      	b.n	8004f8a <sinf+0x26>
 8004fd2:	eddd 0a01 	vldr	s1, [sp, #4]
 8004fd6:	ed9d 0a00 	vldr	s0, [sp]
 8004fda:	f000 f931 	bl	8005240 <__kernel_cosf>
 8004fde:	e7f5      	b.n	8004fcc <sinf+0x68>
 8004fe0:	3f490fd8 	.word	0x3f490fd8
 8004fe4:	00000000 	.word	0x00000000

08004fe8 <__ieee754_rem_pio2f>:
 8004fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fea:	ee10 6a10 	vmov	r6, s0
 8004fee:	4b86      	ldr	r3, [pc, #536]	; (8005208 <__ieee754_rem_pio2f+0x220>)
 8004ff0:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8004ff4:	429c      	cmp	r4, r3
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	4605      	mov	r5, r0
 8004ffa:	dc05      	bgt.n	8005008 <__ieee754_rem_pio2f+0x20>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	ed85 0a00 	vstr	s0, [r5]
 8005002:	6043      	str	r3, [r0, #4]
 8005004:	2000      	movs	r0, #0
 8005006:	e020      	b.n	800504a <__ieee754_rem_pio2f+0x62>
 8005008:	4b80      	ldr	r3, [pc, #512]	; (800520c <__ieee754_rem_pio2f+0x224>)
 800500a:	429c      	cmp	r4, r3
 800500c:	dc38      	bgt.n	8005080 <__ieee754_rem_pio2f+0x98>
 800500e:	2e00      	cmp	r6, #0
 8005010:	f024 040f 	bic.w	r4, r4, #15
 8005014:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8005210 <__ieee754_rem_pio2f+0x228>
 8005018:	4b7e      	ldr	r3, [pc, #504]	; (8005214 <__ieee754_rem_pio2f+0x22c>)
 800501a:	dd18      	ble.n	800504e <__ieee754_rem_pio2f+0x66>
 800501c:	429c      	cmp	r4, r3
 800501e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8005022:	bf09      	itett	eq
 8005024:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8005218 <__ieee754_rem_pio2f+0x230>
 8005028:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800521c <__ieee754_rem_pio2f+0x234>
 800502c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8005030:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8005220 <__ieee754_rem_pio2f+0x238>
 8005034:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005038:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800503c:	edc0 6a00 	vstr	s13, [r0]
 8005040:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005044:	edc0 7a01 	vstr	s15, [r0, #4]
 8005048:	2001      	movs	r0, #1
 800504a:	b007      	add	sp, #28
 800504c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800504e:	429c      	cmp	r4, r3
 8005050:	ee70 7a07 	vadd.f32	s15, s0, s14
 8005054:	bf09      	itett	eq
 8005056:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8005218 <__ieee754_rem_pio2f+0x230>
 800505a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800521c <__ieee754_rem_pio2f+0x234>
 800505e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8005062:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8005220 <__ieee754_rem_pio2f+0x238>
 8005066:	ee77 6a87 	vadd.f32	s13, s15, s14
 800506a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800506e:	edc0 6a00 	vstr	s13, [r0]
 8005072:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005076:	edc0 7a01 	vstr	s15, [r0, #4]
 800507a:	f04f 30ff 	mov.w	r0, #4294967295
 800507e:	e7e4      	b.n	800504a <__ieee754_rem_pio2f+0x62>
 8005080:	4b68      	ldr	r3, [pc, #416]	; (8005224 <__ieee754_rem_pio2f+0x23c>)
 8005082:	429c      	cmp	r4, r3
 8005084:	dc71      	bgt.n	800516a <__ieee754_rem_pio2f+0x182>
 8005086:	f000 fc03 	bl	8005890 <fabsf>
 800508a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8005228 <__ieee754_rem_pio2f+0x240>
 800508e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005092:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005096:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800509a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800509e:	ee17 0a90 	vmov	r0, s15
 80050a2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8005210 <__ieee754_rem_pio2f+0x228>
 80050a6:	eeb1 7a46 	vneg.f32	s14, s12
 80050aa:	eea7 0a27 	vfma.f32	s0, s14, s15
 80050ae:	281f      	cmp	r0, #31
 80050b0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800521c <__ieee754_rem_pio2f+0x234>
 80050b4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80050b8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80050bc:	ee16 3a90 	vmov	r3, s13
 80050c0:	dc1c      	bgt.n	80050fc <__ieee754_rem_pio2f+0x114>
 80050c2:	1e47      	subs	r7, r0, #1
 80050c4:	4959      	ldr	r1, [pc, #356]	; (800522c <__ieee754_rem_pio2f+0x244>)
 80050c6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80050ca:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80050ce:	428a      	cmp	r2, r1
 80050d0:	d014      	beq.n	80050fc <__ieee754_rem_pio2f+0x114>
 80050d2:	602b      	str	r3, [r5, #0]
 80050d4:	ed95 7a00 	vldr	s14, [r5]
 80050d8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80050dc:	2e00      	cmp	r6, #0
 80050de:	ee30 0a67 	vsub.f32	s0, s0, s15
 80050e2:	ed85 0a01 	vstr	s0, [r5, #4]
 80050e6:	dab0      	bge.n	800504a <__ieee754_rem_pio2f+0x62>
 80050e8:	eeb1 7a47 	vneg.f32	s14, s14
 80050ec:	eeb1 0a40 	vneg.f32	s0, s0
 80050f0:	ed85 7a00 	vstr	s14, [r5]
 80050f4:	ed85 0a01 	vstr	s0, [r5, #4]
 80050f8:	4240      	negs	r0, r0
 80050fa:	e7a6      	b.n	800504a <__ieee754_rem_pio2f+0x62>
 80050fc:	15e4      	asrs	r4, r4, #23
 80050fe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005102:	1aa2      	subs	r2, r4, r2
 8005104:	2a08      	cmp	r2, #8
 8005106:	dde4      	ble.n	80050d2 <__ieee754_rem_pio2f+0xea>
 8005108:	eddf 7a43 	vldr	s15, [pc, #268]	; 8005218 <__ieee754_rem_pio2f+0x230>
 800510c:	eef0 6a40 	vmov.f32	s13, s0
 8005110:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005114:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005118:	eea7 0a27 	vfma.f32	s0, s14, s15
 800511c:	eddf 7a40 	vldr	s15, [pc, #256]	; 8005220 <__ieee754_rem_pio2f+0x238>
 8005120:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8005124:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8005128:	eef0 7a40 	vmov.f32	s15, s0
 800512c:	ee15 3a90 	vmov	r3, s11
 8005130:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005134:	1aa4      	subs	r4, r4, r2
 8005136:	2c19      	cmp	r4, #25
 8005138:	dc04      	bgt.n	8005144 <__ieee754_rem_pio2f+0x15c>
 800513a:	edc5 5a00 	vstr	s11, [r5]
 800513e:	eeb0 0a66 	vmov.f32	s0, s13
 8005142:	e7c7      	b.n	80050d4 <__ieee754_rem_pio2f+0xec>
 8005144:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8005230 <__ieee754_rem_pio2f+0x248>
 8005148:	eeb0 0a66 	vmov.f32	s0, s13
 800514c:	eea7 0a25 	vfma.f32	s0, s14, s11
 8005150:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8005154:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005158:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005234 <__ieee754_rem_pio2f+0x24c>
 800515c:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8005160:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005164:	ed85 7a00 	vstr	s14, [r5]
 8005168:	e7b4      	b.n	80050d4 <__ieee754_rem_pio2f+0xec>
 800516a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800516e:	db06      	blt.n	800517e <__ieee754_rem_pio2f+0x196>
 8005170:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005174:	edc0 7a01 	vstr	s15, [r0, #4]
 8005178:	edc0 7a00 	vstr	s15, [r0]
 800517c:	e742      	b.n	8005004 <__ieee754_rem_pio2f+0x1c>
 800517e:	15e2      	asrs	r2, r4, #23
 8005180:	3a86      	subs	r2, #134	; 0x86
 8005182:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800518e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8005238 <__ieee754_rem_pio2f+0x250>
 8005192:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005196:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800519a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800519e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80051a2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80051a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80051aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80051ae:	ed8d 7a04 	vstr	s14, [sp, #16]
 80051b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80051b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80051ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051be:	edcd 7a05 	vstr	s15, [sp, #20]
 80051c2:	d11e      	bne.n	8005202 <__ieee754_rem_pio2f+0x21a>
 80051c4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80051c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051cc:	bf0c      	ite	eq
 80051ce:	2301      	moveq	r3, #1
 80051d0:	2302      	movne	r3, #2
 80051d2:	491a      	ldr	r1, [pc, #104]	; (800523c <__ieee754_rem_pio2f+0x254>)
 80051d4:	9101      	str	r1, [sp, #4]
 80051d6:	2102      	movs	r1, #2
 80051d8:	9100      	str	r1, [sp, #0]
 80051da:	a803      	add	r0, sp, #12
 80051dc:	4629      	mov	r1, r5
 80051de:	f000 f88d 	bl	80052fc <__kernel_rem_pio2f>
 80051e2:	2e00      	cmp	r6, #0
 80051e4:	f6bf af31 	bge.w	800504a <__ieee754_rem_pio2f+0x62>
 80051e8:	edd5 7a00 	vldr	s15, [r5]
 80051ec:	eef1 7a67 	vneg.f32	s15, s15
 80051f0:	edc5 7a00 	vstr	s15, [r5]
 80051f4:	edd5 7a01 	vldr	s15, [r5, #4]
 80051f8:	eef1 7a67 	vneg.f32	s15, s15
 80051fc:	edc5 7a01 	vstr	s15, [r5, #4]
 8005200:	e77a      	b.n	80050f8 <__ieee754_rem_pio2f+0x110>
 8005202:	2303      	movs	r3, #3
 8005204:	e7e5      	b.n	80051d2 <__ieee754_rem_pio2f+0x1ea>
 8005206:	bf00      	nop
 8005208:	3f490fd8 	.word	0x3f490fd8
 800520c:	4016cbe3 	.word	0x4016cbe3
 8005210:	3fc90f80 	.word	0x3fc90f80
 8005214:	3fc90fd0 	.word	0x3fc90fd0
 8005218:	37354400 	.word	0x37354400
 800521c:	37354443 	.word	0x37354443
 8005220:	2e85a308 	.word	0x2e85a308
 8005224:	43490f80 	.word	0x43490f80
 8005228:	3f22f984 	.word	0x3f22f984
 800522c:	08005a34 	.word	0x08005a34
 8005230:	2e85a300 	.word	0x2e85a300
 8005234:	248d3132 	.word	0x248d3132
 8005238:	43800000 	.word	0x43800000
 800523c:	08005ab4 	.word	0x08005ab4

08005240 <__kernel_cosf>:
 8005240:	ee10 3a10 	vmov	r3, s0
 8005244:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005248:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800524c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005250:	da05      	bge.n	800525e <__kernel_cosf+0x1e>
 8005252:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005256:	ee17 2a90 	vmov	r2, s15
 800525a:	2a00      	cmp	r2, #0
 800525c:	d03b      	beq.n	80052d6 <__kernel_cosf+0x96>
 800525e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8005262:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005266:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80052dc <__kernel_cosf+0x9c>
 800526a:	4a1d      	ldr	r2, [pc, #116]	; (80052e0 <__kernel_cosf+0xa0>)
 800526c:	ee66 7a07 	vmul.f32	s15, s12, s14
 8005270:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80052e4 <__kernel_cosf+0xa4>
 8005274:	eea6 7a25 	vfma.f32	s14, s12, s11
 8005278:	4293      	cmp	r3, r2
 800527a:	eddf 5a1b 	vldr	s11, [pc, #108]	; 80052e8 <__kernel_cosf+0xa8>
 800527e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8005282:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80052ec <__kernel_cosf+0xac>
 8005286:	eea5 7a86 	vfma.f32	s14, s11, s12
 800528a:	eddf 5a19 	vldr	s11, [pc, #100]	; 80052f0 <__kernel_cosf+0xb0>
 800528e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8005292:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80052f4 <__kernel_cosf+0xb4>
 8005296:	eea5 7a86 	vfma.f32	s14, s11, s12
 800529a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800529e:	ee27 7a06 	vmul.f32	s14, s14, s12
 80052a2:	eee6 0a07 	vfma.f32	s1, s12, s14
 80052a6:	dc04      	bgt.n	80052b2 <__kernel_cosf+0x72>
 80052a8:	ee77 0ae0 	vsub.f32	s1, s15, s1
 80052ac:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80052b0:	4770      	bx	lr
 80052b2:	4a11      	ldr	r2, [pc, #68]	; (80052f8 <__kernel_cosf+0xb8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	bfda      	itte	le
 80052b8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80052bc:	ee07 3a10 	vmovle	s14, r3
 80052c0:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80052c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80052c8:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80052cc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80052d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80052d4:	4770      	bx	lr
 80052d6:	eeb0 0a66 	vmov.f32	s0, s13
 80052da:	4770      	bx	lr
 80052dc:	ad47d74e 	.word	0xad47d74e
 80052e0:	3e999999 	.word	0x3e999999
 80052e4:	310f74f6 	.word	0x310f74f6
 80052e8:	b493f27c 	.word	0xb493f27c
 80052ec:	37d00d01 	.word	0x37d00d01
 80052f0:	bab60b61 	.word	0xbab60b61
 80052f4:	3d2aaaab 	.word	0x3d2aaaab
 80052f8:	3f480000 	.word	0x3f480000

080052fc <__kernel_rem_pio2f>:
 80052fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005300:	ed2d 8b04 	vpush	{d8-d9}
 8005304:	b0d7      	sub	sp, #348	; 0x15c
 8005306:	469b      	mov	fp, r3
 8005308:	460e      	mov	r6, r1
 800530a:	4bbe      	ldr	r3, [pc, #760]	; (8005604 <__kernel_rem_pio2f+0x308>)
 800530c:	9964      	ldr	r1, [sp, #400]	; 0x190
 800530e:	9002      	str	r0, [sp, #8]
 8005310:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8005314:	9865      	ldr	r0, [sp, #404]	; 0x194
 8005316:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8005614 <__kernel_rem_pio2f+0x318>
 800531a:	1ed1      	subs	r1, r2, #3
 800531c:	2308      	movs	r3, #8
 800531e:	fb91 f1f3 	sdiv	r1, r1, r3
 8005322:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8005326:	f10b 3aff 	add.w	sl, fp, #4294967295
 800532a:	1c4c      	adds	r4, r1, #1
 800532c:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8005330:	eba1 050a 	sub.w	r5, r1, sl
 8005334:	aa1a      	add	r2, sp, #104	; 0x68
 8005336:	eb09 070a 	add.w	r7, r9, sl
 800533a:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800533e:	4696      	mov	lr, r2
 8005340:	2300      	movs	r3, #0
 8005342:	42bb      	cmp	r3, r7
 8005344:	dd0f      	ble.n	8005366 <__kernel_rem_pio2f+0x6a>
 8005346:	af42      	add	r7, sp, #264	; 0x108
 8005348:	2200      	movs	r2, #0
 800534a:	454a      	cmp	r2, r9
 800534c:	dc27      	bgt.n	800539e <__kernel_rem_pio2f+0xa2>
 800534e:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8005352:	eb0b 0302 	add.w	r3, fp, r2
 8005356:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800535a:	9d02      	ldr	r5, [sp, #8]
 800535c:	eddf 7aad 	vldr	s15, [pc, #692]	; 8005614 <__kernel_rem_pio2f+0x318>
 8005360:	f04f 0c00 	mov.w	ip, #0
 8005364:	e015      	b.n	8005392 <__kernel_rem_pio2f+0x96>
 8005366:	42dd      	cmn	r5, r3
 8005368:	bf5d      	ittte	pl
 800536a:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800536e:	ee07 2a90 	vmovpl	s15, r2
 8005372:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005376:	eef0 7a47 	vmovmi.f32	s15, s14
 800537a:	ecee 7a01 	vstmia	lr!, {s15}
 800537e:	3301      	adds	r3, #1
 8005380:	e7df      	b.n	8005342 <__kernel_rem_pio2f+0x46>
 8005382:	ecf5 6a01 	vldmia	r5!, {s13}
 8005386:	ed33 7a01 	vldmdb	r3!, {s14}
 800538a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800538e:	f10c 0c01 	add.w	ip, ip, #1
 8005392:	45d4      	cmp	ip, sl
 8005394:	ddf5      	ble.n	8005382 <__kernel_rem_pio2f+0x86>
 8005396:	ece7 7a01 	vstmia	r7!, {s15}
 800539a:	3201      	adds	r2, #1
 800539c:	e7d5      	b.n	800534a <__kernel_rem_pio2f+0x4e>
 800539e:	ab06      	add	r3, sp, #24
 80053a0:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80053a4:	9304      	str	r3, [sp, #16]
 80053a6:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8005610 <__kernel_rem_pio2f+0x314>
 80053aa:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800560c <__kernel_rem_pio2f+0x310>
 80053ae:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80053b2:	9303      	str	r3, [sp, #12]
 80053b4:	464d      	mov	r5, r9
 80053b6:	ab56      	add	r3, sp, #344	; 0x158
 80053b8:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80053bc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80053c0:	3f01      	subs	r7, #1
 80053c2:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80053c6:	00bf      	lsls	r7, r7, #2
 80053c8:	ab56      	add	r3, sp, #344	; 0x158
 80053ca:	19da      	adds	r2, r3, r7
 80053cc:	3a4c      	subs	r2, #76	; 0x4c
 80053ce:	2300      	movs	r3, #0
 80053d0:	1ae9      	subs	r1, r5, r3
 80053d2:	2900      	cmp	r1, #0
 80053d4:	dc4c      	bgt.n	8005470 <__kernel_rem_pio2f+0x174>
 80053d6:	4620      	mov	r0, r4
 80053d8:	f000 faa4 	bl	8005924 <scalbnf>
 80053dc:	eeb0 8a40 	vmov.f32	s16, s0
 80053e0:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80053e4:	ee28 0a00 	vmul.f32	s0, s16, s0
 80053e8:	f000 fa5a 	bl	80058a0 <floorf>
 80053ec:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80053f0:	eea0 8a67 	vfms.f32	s16, s0, s15
 80053f4:	2c00      	cmp	r4, #0
 80053f6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80053fa:	edcd 7a01 	vstr	s15, [sp, #4]
 80053fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005402:	ee38 8a67 	vsub.f32	s16, s16, s15
 8005406:	dd48      	ble.n	800549a <__kernel_rem_pio2f+0x19e>
 8005408:	1e69      	subs	r1, r5, #1
 800540a:	ab06      	add	r3, sp, #24
 800540c:	f1c4 0008 	rsb	r0, r4, #8
 8005410:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8005414:	9a01      	ldr	r2, [sp, #4]
 8005416:	fa4c f300 	asr.w	r3, ip, r0
 800541a:	441a      	add	r2, r3
 800541c:	4083      	lsls	r3, r0
 800541e:	9201      	str	r2, [sp, #4]
 8005420:	ebac 0203 	sub.w	r2, ip, r3
 8005424:	ab06      	add	r3, sp, #24
 8005426:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800542a:	f1c4 0307 	rsb	r3, r4, #7
 800542e:	fa42 f803 	asr.w	r8, r2, r3
 8005432:	f1b8 0f00 	cmp.w	r8, #0
 8005436:	dd41      	ble.n	80054bc <__kernel_rem_pio2f+0x1c0>
 8005438:	9b01      	ldr	r3, [sp, #4]
 800543a:	2000      	movs	r0, #0
 800543c:	3301      	adds	r3, #1
 800543e:	9301      	str	r3, [sp, #4]
 8005440:	4601      	mov	r1, r0
 8005442:	4285      	cmp	r5, r0
 8005444:	dc6d      	bgt.n	8005522 <__kernel_rem_pio2f+0x226>
 8005446:	2c00      	cmp	r4, #0
 8005448:	dd04      	ble.n	8005454 <__kernel_rem_pio2f+0x158>
 800544a:	2c01      	cmp	r4, #1
 800544c:	d07e      	beq.n	800554c <__kernel_rem_pio2f+0x250>
 800544e:	2c02      	cmp	r4, #2
 8005450:	f000 8086 	beq.w	8005560 <__kernel_rem_pio2f+0x264>
 8005454:	f1b8 0f02 	cmp.w	r8, #2
 8005458:	d130      	bne.n	80054bc <__kernel_rem_pio2f+0x1c0>
 800545a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800545e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8005462:	b359      	cbz	r1, 80054bc <__kernel_rem_pio2f+0x1c0>
 8005464:	4620      	mov	r0, r4
 8005466:	f000 fa5d 	bl	8005924 <scalbnf>
 800546a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800546e:	e025      	b.n	80054bc <__kernel_rem_pio2f+0x1c0>
 8005470:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005474:	a806      	add	r0, sp, #24
 8005476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800547a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800547e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005482:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005486:	ee10 1a10 	vmov	r1, s0
 800548a:	ed32 0a01 	vldmdb	r2!, {s0}
 800548e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8005492:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005496:	3301      	adds	r3, #1
 8005498:	e79a      	b.n	80053d0 <__kernel_rem_pio2f+0xd4>
 800549a:	d106      	bne.n	80054aa <__kernel_rem_pio2f+0x1ae>
 800549c:	1e6b      	subs	r3, r5, #1
 800549e:	aa06      	add	r2, sp, #24
 80054a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80054a4:	ea4f 2822 	mov.w	r8, r2, asr #8
 80054a8:	e7c3      	b.n	8005432 <__kernel_rem_pio2f+0x136>
 80054aa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80054ae:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80054b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b6:	da31      	bge.n	800551c <__kernel_rem_pio2f+0x220>
 80054b8:	f04f 0800 	mov.w	r8, #0
 80054bc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80054c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c4:	f040 80a8 	bne.w	8005618 <__kernel_rem_pio2f+0x31c>
 80054c8:	1e6b      	subs	r3, r5, #1
 80054ca:	4618      	mov	r0, r3
 80054cc:	2200      	movs	r2, #0
 80054ce:	4548      	cmp	r0, r9
 80054d0:	da4d      	bge.n	800556e <__kernel_rem_pio2f+0x272>
 80054d2:	2a00      	cmp	r2, #0
 80054d4:	f000 8087 	beq.w	80055e6 <__kernel_rem_pio2f+0x2ea>
 80054d8:	aa06      	add	r2, sp, #24
 80054da:	3c08      	subs	r4, #8
 80054dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80054e0:	2900      	cmp	r1, #0
 80054e2:	f000 808d 	beq.w	8005600 <__kernel_rem_pio2f+0x304>
 80054e6:	4620      	mov	r0, r4
 80054e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80054ec:	9302      	str	r3, [sp, #8]
 80054ee:	f000 fa19 	bl	8005924 <scalbnf>
 80054f2:	9b02      	ldr	r3, [sp, #8]
 80054f4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8005610 <__kernel_rem_pio2f+0x314>
 80054f8:	0099      	lsls	r1, r3, #2
 80054fa:	aa42      	add	r2, sp, #264	; 0x108
 80054fc:	1850      	adds	r0, r2, r1
 80054fe:	1d05      	adds	r5, r0, #4
 8005500:	461c      	mov	r4, r3
 8005502:	2c00      	cmp	r4, #0
 8005504:	f280 80b8 	bge.w	8005678 <__kernel_rem_pio2f+0x37c>
 8005508:	2500      	movs	r5, #0
 800550a:	1b5c      	subs	r4, r3, r5
 800550c:	2c00      	cmp	r4, #0
 800550e:	f2c0 80d8 	blt.w	80056c2 <__kernel_rem_pio2f+0x3c6>
 8005512:	4f3d      	ldr	r7, [pc, #244]	; (8005608 <__kernel_rem_pio2f+0x30c>)
 8005514:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8005614 <__kernel_rem_pio2f+0x318>
 8005518:	2400      	movs	r4, #0
 800551a:	e0c6      	b.n	80056aa <__kernel_rem_pio2f+0x3ae>
 800551c:	f04f 0802 	mov.w	r8, #2
 8005520:	e78a      	b.n	8005438 <__kernel_rem_pio2f+0x13c>
 8005522:	ab06      	add	r3, sp, #24
 8005524:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005528:	b949      	cbnz	r1, 800553e <__kernel_rem_pio2f+0x242>
 800552a:	b12b      	cbz	r3, 8005538 <__kernel_rem_pio2f+0x23c>
 800552c:	aa06      	add	r2, sp, #24
 800552e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8005532:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8005536:	2301      	movs	r3, #1
 8005538:	3001      	adds	r0, #1
 800553a:	4619      	mov	r1, r3
 800553c:	e781      	b.n	8005442 <__kernel_rem_pio2f+0x146>
 800553e:	aa06      	add	r2, sp, #24
 8005540:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8005544:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8005548:	460b      	mov	r3, r1
 800554a:	e7f5      	b.n	8005538 <__kernel_rem_pio2f+0x23c>
 800554c:	1e68      	subs	r0, r5, #1
 800554e:	ab06      	add	r3, sp, #24
 8005550:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005558:	aa06      	add	r2, sp, #24
 800555a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800555e:	e779      	b.n	8005454 <__kernel_rem_pio2f+0x158>
 8005560:	1e68      	subs	r0, r5, #1
 8005562:	ab06      	add	r3, sp, #24
 8005564:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800556c:	e7f4      	b.n	8005558 <__kernel_rem_pio2f+0x25c>
 800556e:	a906      	add	r1, sp, #24
 8005570:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005574:	3801      	subs	r0, #1
 8005576:	430a      	orrs	r2, r1
 8005578:	e7a9      	b.n	80054ce <__kernel_rem_pio2f+0x1d2>
 800557a:	f10c 0c01 	add.w	ip, ip, #1
 800557e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005582:	2a00      	cmp	r2, #0
 8005584:	d0f9      	beq.n	800557a <__kernel_rem_pio2f+0x27e>
 8005586:	eb0b 0305 	add.w	r3, fp, r5
 800558a:	aa1a      	add	r2, sp, #104	; 0x68
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	1898      	adds	r0, r3, r2
 8005590:	3004      	adds	r0, #4
 8005592:	1c69      	adds	r1, r5, #1
 8005594:	3704      	adds	r7, #4
 8005596:	2200      	movs	r2, #0
 8005598:	4465      	add	r5, ip
 800559a:	9005      	str	r0, [sp, #20]
 800559c:	428d      	cmp	r5, r1
 800559e:	f6ff af0a 	blt.w	80053b6 <__kernel_rem_pio2f+0xba>
 80055a2:	a81a      	add	r0, sp, #104	; 0x68
 80055a4:	eb02 0c03 	add.w	ip, r2, r3
 80055a8:	4484      	add	ip, r0
 80055aa:	9803      	ldr	r0, [sp, #12]
 80055ac:	f8dd e008 	ldr.w	lr, [sp, #8]
 80055b0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80055b4:	9001      	str	r0, [sp, #4]
 80055b6:	ee07 0a90 	vmov	s15, r0
 80055ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055be:	9805      	ldr	r0, [sp, #20]
 80055c0:	edcc 7a00 	vstr	s15, [ip]
 80055c4:	eddf 7a13 	vldr	s15, [pc, #76]	; 8005614 <__kernel_rem_pio2f+0x318>
 80055c8:	eb00 0802 	add.w	r8, r0, r2
 80055cc:	f04f 0c00 	mov.w	ip, #0
 80055d0:	45d4      	cmp	ip, sl
 80055d2:	dd0c      	ble.n	80055ee <__kernel_rem_pio2f+0x2f2>
 80055d4:	eb02 0c07 	add.w	ip, r2, r7
 80055d8:	a842      	add	r0, sp, #264	; 0x108
 80055da:	4484      	add	ip, r0
 80055dc:	edcc 7a01 	vstr	s15, [ip, #4]
 80055e0:	3101      	adds	r1, #1
 80055e2:	3204      	adds	r2, #4
 80055e4:	e7da      	b.n	800559c <__kernel_rem_pio2f+0x2a0>
 80055e6:	9b04      	ldr	r3, [sp, #16]
 80055e8:	f04f 0c01 	mov.w	ip, #1
 80055ec:	e7c7      	b.n	800557e <__kernel_rem_pio2f+0x282>
 80055ee:	ecfe 6a01 	vldmia	lr!, {s13}
 80055f2:	ed38 7a01 	vldmdb	r8!, {s14}
 80055f6:	f10c 0c01 	add.w	ip, ip, #1
 80055fa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80055fe:	e7e7      	b.n	80055d0 <__kernel_rem_pio2f+0x2d4>
 8005600:	3b01      	subs	r3, #1
 8005602:	e769      	b.n	80054d8 <__kernel_rem_pio2f+0x1dc>
 8005604:	08005df8 	.word	0x08005df8
 8005608:	08005dcc 	.word	0x08005dcc
 800560c:	43800000 	.word	0x43800000
 8005610:	3b800000 	.word	0x3b800000
 8005614:	00000000 	.word	0x00000000
 8005618:	4260      	negs	r0, r4
 800561a:	eeb0 0a48 	vmov.f32	s0, s16
 800561e:	f000 f981 	bl	8005924 <scalbnf>
 8005622:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800560c <__kernel_rem_pio2f+0x310>
 8005626:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800562a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800562e:	db1a      	blt.n	8005666 <__kernel_rem_pio2f+0x36a>
 8005630:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8005610 <__kernel_rem_pio2f+0x314>
 8005634:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005638:	aa06      	add	r2, sp, #24
 800563a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800563e:	a906      	add	r1, sp, #24
 8005640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005644:	3408      	adds	r4, #8
 8005646:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800564a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800564e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005652:	ee10 3a10 	vmov	r3, s0
 8005656:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800565a:	1c6b      	adds	r3, r5, #1
 800565c:	ee17 2a90 	vmov	r2, s15
 8005660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005664:	e73f      	b.n	80054e6 <__kernel_rem_pio2f+0x1ea>
 8005666:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800566a:	aa06      	add	r2, sp, #24
 800566c:	ee10 3a10 	vmov	r3, s0
 8005670:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8005674:	462b      	mov	r3, r5
 8005676:	e736      	b.n	80054e6 <__kernel_rem_pio2f+0x1ea>
 8005678:	aa06      	add	r2, sp, #24
 800567a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800567e:	9202      	str	r2, [sp, #8]
 8005680:	ee07 2a90 	vmov	s15, r2
 8005684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005688:	3c01      	subs	r4, #1
 800568a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800568e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005692:	ed65 7a01 	vstmdb	r5!, {s15}
 8005696:	e734      	b.n	8005502 <__kernel_rem_pio2f+0x206>
 8005698:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800569c:	ecf7 6a01 	vldmia	r7!, {s13}
 80056a0:	ed9c 7a00 	vldr	s14, [ip]
 80056a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80056a8:	3401      	adds	r4, #1
 80056aa:	454c      	cmp	r4, r9
 80056ac:	dc01      	bgt.n	80056b2 <__kernel_rem_pio2f+0x3b6>
 80056ae:	42a5      	cmp	r5, r4
 80056b0:	daf2      	bge.n	8005698 <__kernel_rem_pio2f+0x39c>
 80056b2:	aa56      	add	r2, sp, #344	; 0x158
 80056b4:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 80056b8:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 80056bc:	3501      	adds	r5, #1
 80056be:	3804      	subs	r0, #4
 80056c0:	e723      	b.n	800550a <__kernel_rem_pio2f+0x20e>
 80056c2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80056c4:	2a03      	cmp	r2, #3
 80056c6:	d84d      	bhi.n	8005764 <__kernel_rem_pio2f+0x468>
 80056c8:	e8df f002 	tbb	[pc, r2]
 80056cc:	021f1f3e 	.word	0x021f1f3e
 80056d0:	aa56      	add	r2, sp, #344	; 0x158
 80056d2:	4411      	add	r1, r2
 80056d4:	399c      	subs	r1, #156	; 0x9c
 80056d6:	4608      	mov	r0, r1
 80056d8:	461c      	mov	r4, r3
 80056da:	2c00      	cmp	r4, #0
 80056dc:	dc5f      	bgt.n	800579e <__kernel_rem_pio2f+0x4a2>
 80056de:	4608      	mov	r0, r1
 80056e0:	461c      	mov	r4, r3
 80056e2:	2c01      	cmp	r4, #1
 80056e4:	dc6b      	bgt.n	80057be <__kernel_rem_pio2f+0x4c2>
 80056e6:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8005614 <__kernel_rem_pio2f+0x318>
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	dc77      	bgt.n	80057de <__kernel_rem_pio2f+0x4e2>
 80056ee:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80056f2:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80056f6:	f1b8 0f00 	cmp.w	r8, #0
 80056fa:	d176      	bne.n	80057ea <__kernel_rem_pio2f+0x4ee>
 80056fc:	edc6 6a00 	vstr	s13, [r6]
 8005700:	ed86 7a01 	vstr	s14, [r6, #4]
 8005704:	edc6 7a02 	vstr	s15, [r6, #8]
 8005708:	e02c      	b.n	8005764 <__kernel_rem_pio2f+0x468>
 800570a:	aa56      	add	r2, sp, #344	; 0x158
 800570c:	4411      	add	r1, r2
 800570e:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8005614 <__kernel_rem_pio2f+0x318>
 8005712:	399c      	subs	r1, #156	; 0x9c
 8005714:	4618      	mov	r0, r3
 8005716:	2800      	cmp	r0, #0
 8005718:	da32      	bge.n	8005780 <__kernel_rem_pio2f+0x484>
 800571a:	f1b8 0f00 	cmp.w	r8, #0
 800571e:	d035      	beq.n	800578c <__kernel_rem_pio2f+0x490>
 8005720:	eef1 7a47 	vneg.f32	s15, s14
 8005724:	edc6 7a00 	vstr	s15, [r6]
 8005728:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800572c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005730:	a82f      	add	r0, sp, #188	; 0xbc
 8005732:	2101      	movs	r1, #1
 8005734:	428b      	cmp	r3, r1
 8005736:	da2c      	bge.n	8005792 <__kernel_rem_pio2f+0x496>
 8005738:	f1b8 0f00 	cmp.w	r8, #0
 800573c:	d001      	beq.n	8005742 <__kernel_rem_pio2f+0x446>
 800573e:	eef1 7a67 	vneg.f32	s15, s15
 8005742:	edc6 7a01 	vstr	s15, [r6, #4]
 8005746:	e00d      	b.n	8005764 <__kernel_rem_pio2f+0x468>
 8005748:	aa56      	add	r2, sp, #344	; 0x158
 800574a:	4411      	add	r1, r2
 800574c:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8005614 <__kernel_rem_pio2f+0x318>
 8005750:	399c      	subs	r1, #156	; 0x9c
 8005752:	2b00      	cmp	r3, #0
 8005754:	da0e      	bge.n	8005774 <__kernel_rem_pio2f+0x478>
 8005756:	f1b8 0f00 	cmp.w	r8, #0
 800575a:	d001      	beq.n	8005760 <__kernel_rem_pio2f+0x464>
 800575c:	eef1 7a67 	vneg.f32	s15, s15
 8005760:	edc6 7a00 	vstr	s15, [r6]
 8005764:	9b01      	ldr	r3, [sp, #4]
 8005766:	f003 0007 	and.w	r0, r3, #7
 800576a:	b057      	add	sp, #348	; 0x15c
 800576c:	ecbd 8b04 	vpop	{d8-d9}
 8005770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005774:	ed31 7a01 	vldmdb	r1!, {s14}
 8005778:	3b01      	subs	r3, #1
 800577a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800577e:	e7e8      	b.n	8005752 <__kernel_rem_pio2f+0x456>
 8005780:	ed71 7a01 	vldmdb	r1!, {s15}
 8005784:	3801      	subs	r0, #1
 8005786:	ee37 7a27 	vadd.f32	s14, s14, s15
 800578a:	e7c4      	b.n	8005716 <__kernel_rem_pio2f+0x41a>
 800578c:	eef0 7a47 	vmov.f32	s15, s14
 8005790:	e7c8      	b.n	8005724 <__kernel_rem_pio2f+0x428>
 8005792:	ecb0 7a01 	vldmia	r0!, {s14}
 8005796:	3101      	adds	r1, #1
 8005798:	ee77 7a87 	vadd.f32	s15, s15, s14
 800579c:	e7ca      	b.n	8005734 <__kernel_rem_pio2f+0x438>
 800579e:	ed50 7a02 	vldr	s15, [r0, #-8]
 80057a2:	ed70 6a01 	vldmdb	r0!, {s13}
 80057a6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80057aa:	3c01      	subs	r4, #1
 80057ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80057b0:	ed00 7a01 	vstr	s14, [r0, #-4]
 80057b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057b8:	edc0 7a00 	vstr	s15, [r0]
 80057bc:	e78d      	b.n	80056da <__kernel_rem_pio2f+0x3de>
 80057be:	ed50 7a02 	vldr	s15, [r0, #-8]
 80057c2:	ed70 6a01 	vldmdb	r0!, {s13}
 80057c6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80057ca:	3c01      	subs	r4, #1
 80057cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80057d0:	ed00 7a01 	vstr	s14, [r0, #-4]
 80057d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057d8:	edc0 7a00 	vstr	s15, [r0]
 80057dc:	e781      	b.n	80056e2 <__kernel_rem_pio2f+0x3e6>
 80057de:	ed31 7a01 	vldmdb	r1!, {s14}
 80057e2:	3b01      	subs	r3, #1
 80057e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057e8:	e77f      	b.n	80056ea <__kernel_rem_pio2f+0x3ee>
 80057ea:	eef1 6a66 	vneg.f32	s13, s13
 80057ee:	eeb1 7a47 	vneg.f32	s14, s14
 80057f2:	edc6 6a00 	vstr	s13, [r6]
 80057f6:	ed86 7a01 	vstr	s14, [r6, #4]
 80057fa:	eef1 7a67 	vneg.f32	s15, s15
 80057fe:	e781      	b.n	8005704 <__kernel_rem_pio2f+0x408>

08005800 <__kernel_sinf>:
 8005800:	ee10 3a10 	vmov	r3, s0
 8005804:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005808:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800580c:	da04      	bge.n	8005818 <__kernel_sinf+0x18>
 800580e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005812:	ee17 3a90 	vmov	r3, s15
 8005816:	b35b      	cbz	r3, 8005870 <__kernel_sinf+0x70>
 8005818:	ee20 7a00 	vmul.f32	s14, s0, s0
 800581c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005874 <__kernel_sinf+0x74>
 8005820:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8005878 <__kernel_sinf+0x78>
 8005824:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005828:	eddf 7a14 	vldr	s15, [pc, #80]	; 800587c <__kernel_sinf+0x7c>
 800582c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005830:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8005880 <__kernel_sinf+0x80>
 8005834:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005838:	eddf 7a12 	vldr	s15, [pc, #72]	; 8005884 <__kernel_sinf+0x84>
 800583c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005840:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005844:	b930      	cbnz	r0, 8005854 <__kernel_sinf+0x54>
 8005846:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8005888 <__kernel_sinf+0x88>
 800584a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800584e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8005852:	4770      	bx	lr
 8005854:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005858:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800585c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8005860:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005864:	eddf 7a09 	vldr	s15, [pc, #36]	; 800588c <__kernel_sinf+0x8c>
 8005868:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800586c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	2f2ec9d3 	.word	0x2f2ec9d3
 8005878:	b2d72f34 	.word	0xb2d72f34
 800587c:	3638ef1b 	.word	0x3638ef1b
 8005880:	b9500d01 	.word	0xb9500d01
 8005884:	3c088889 	.word	0x3c088889
 8005888:	be2aaaab 	.word	0xbe2aaaab
 800588c:	3e2aaaab 	.word	0x3e2aaaab

08005890 <fabsf>:
 8005890:	ee10 3a10 	vmov	r3, s0
 8005894:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005898:	ee00 3a10 	vmov	s0, r3
 800589c:	4770      	bx	lr
	...

080058a0 <floorf>:
 80058a0:	ee10 3a10 	vmov	r3, s0
 80058a4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80058a8:	0dca      	lsrs	r2, r1, #23
 80058aa:	3a7f      	subs	r2, #127	; 0x7f
 80058ac:	2a16      	cmp	r2, #22
 80058ae:	dc2a      	bgt.n	8005906 <floorf+0x66>
 80058b0:	2a00      	cmp	r2, #0
 80058b2:	da11      	bge.n	80058d8 <floorf+0x38>
 80058b4:	eddf 7a18 	vldr	s15, [pc, #96]	; 8005918 <floorf+0x78>
 80058b8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80058bc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80058c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c4:	dd05      	ble.n	80058d2 <floorf+0x32>
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	da23      	bge.n	8005912 <floorf+0x72>
 80058ca:	4a14      	ldr	r2, [pc, #80]	; (800591c <floorf+0x7c>)
 80058cc:	2900      	cmp	r1, #0
 80058ce:	bf18      	it	ne
 80058d0:	4613      	movne	r3, r2
 80058d2:	ee00 3a10 	vmov	s0, r3
 80058d6:	4770      	bx	lr
 80058d8:	4911      	ldr	r1, [pc, #68]	; (8005920 <floorf+0x80>)
 80058da:	4111      	asrs	r1, r2
 80058dc:	420b      	tst	r3, r1
 80058de:	d0fa      	beq.n	80058d6 <floorf+0x36>
 80058e0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8005918 <floorf+0x78>
 80058e4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80058e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80058ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058f0:	ddef      	ble.n	80058d2 <floorf+0x32>
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	bfbe      	ittt	lt
 80058f6:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80058fa:	fa40 f202 	asrlt.w	r2, r0, r2
 80058fe:	189b      	addlt	r3, r3, r2
 8005900:	ea23 0301 	bic.w	r3, r3, r1
 8005904:	e7e5      	b.n	80058d2 <floorf+0x32>
 8005906:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800590a:	d3e4      	bcc.n	80058d6 <floorf+0x36>
 800590c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005910:	4770      	bx	lr
 8005912:	2300      	movs	r3, #0
 8005914:	e7dd      	b.n	80058d2 <floorf+0x32>
 8005916:	bf00      	nop
 8005918:	7149f2ca 	.word	0x7149f2ca
 800591c:	bf800000 	.word	0xbf800000
 8005920:	007fffff 	.word	0x007fffff

08005924 <scalbnf>:
 8005924:	b508      	push	{r3, lr}
 8005926:	ee10 2a10 	vmov	r2, s0
 800592a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800592e:	ed2d 8b02 	vpush	{d8}
 8005932:	eef0 0a40 	vmov.f32	s1, s0
 8005936:	d004      	beq.n	8005942 <scalbnf+0x1e>
 8005938:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800593c:	d306      	bcc.n	800594c <scalbnf+0x28>
 800593e:	ee70 0a00 	vadd.f32	s1, s0, s0
 8005942:	ecbd 8b02 	vpop	{d8}
 8005946:	eeb0 0a60 	vmov.f32	s0, s1
 800594a:	bd08      	pop	{r3, pc}
 800594c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005950:	d21c      	bcs.n	800598c <scalbnf+0x68>
 8005952:	4b1f      	ldr	r3, [pc, #124]	; (80059d0 <scalbnf+0xac>)
 8005954:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80059d4 <scalbnf+0xb0>
 8005958:	4298      	cmp	r0, r3
 800595a:	ee60 0a27 	vmul.f32	s1, s0, s15
 800595e:	db10      	blt.n	8005982 <scalbnf+0x5e>
 8005960:	ee10 2a90 	vmov	r2, s1
 8005964:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8005968:	3b19      	subs	r3, #25
 800596a:	4403      	add	r3, r0
 800596c:	2bfe      	cmp	r3, #254	; 0xfe
 800596e:	dd0f      	ble.n	8005990 <scalbnf+0x6c>
 8005970:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80059d8 <scalbnf+0xb4>
 8005974:	eeb0 0a48 	vmov.f32	s0, s16
 8005978:	f000 f834 	bl	80059e4 <copysignf>
 800597c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8005980:	e7df      	b.n	8005942 <scalbnf+0x1e>
 8005982:	eddf 7a16 	vldr	s15, [pc, #88]	; 80059dc <scalbnf+0xb8>
 8005986:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800598a:	e7da      	b.n	8005942 <scalbnf+0x1e>
 800598c:	0ddb      	lsrs	r3, r3, #23
 800598e:	e7ec      	b.n	800596a <scalbnf+0x46>
 8005990:	2b00      	cmp	r3, #0
 8005992:	dd06      	ble.n	80059a2 <scalbnf+0x7e>
 8005994:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8005998:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800599c:	ee00 3a90 	vmov	s1, r3
 80059a0:	e7cf      	b.n	8005942 <scalbnf+0x1e>
 80059a2:	f113 0f16 	cmn.w	r3, #22
 80059a6:	da06      	bge.n	80059b6 <scalbnf+0x92>
 80059a8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80059ac:	4298      	cmp	r0, r3
 80059ae:	dcdf      	bgt.n	8005970 <scalbnf+0x4c>
 80059b0:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80059dc <scalbnf+0xb8>
 80059b4:	e7de      	b.n	8005974 <scalbnf+0x50>
 80059b6:	3319      	adds	r3, #25
 80059b8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80059bc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80059c0:	eddf 7a07 	vldr	s15, [pc, #28]	; 80059e0 <scalbnf+0xbc>
 80059c4:	ee07 3a10 	vmov	s14, r3
 80059c8:	ee67 0a27 	vmul.f32	s1, s14, s15
 80059cc:	e7b9      	b.n	8005942 <scalbnf+0x1e>
 80059ce:	bf00      	nop
 80059d0:	ffff3cb0 	.word	0xffff3cb0
 80059d4:	4c000000 	.word	0x4c000000
 80059d8:	7149f2ca 	.word	0x7149f2ca
 80059dc:	0da24260 	.word	0x0da24260
 80059e0:	33000000 	.word	0x33000000

080059e4 <copysignf>:
 80059e4:	ee10 3a10 	vmov	r3, s0
 80059e8:	ee10 2a90 	vmov	r2, s1
 80059ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059f0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80059f4:	4313      	orrs	r3, r2
 80059f6:	ee00 3a10 	vmov	s0, r3
 80059fa:	4770      	bx	lr

080059fc <_init>:
 80059fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fe:	bf00      	nop
 8005a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a02:	bc08      	pop	{r3}
 8005a04:	469e      	mov	lr, r3
 8005a06:	4770      	bx	lr

08005a08 <_fini>:
 8005a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0a:	bf00      	nop
 8005a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a0e:	bc08      	pop	{r3}
 8005a10:	469e      	mov	lr, r3
 8005a12:	4770      	bx	lr
